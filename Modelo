{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9f90ee0e-5621-4d79-8baa-c4a01891816d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "pd.set_option('display.float_format', '{:,.2f}'.format)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d7c6ea46-b507-4188-bc35-b56144049f91",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/inmuebles.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0e84942c-f2ff-437e-9a7e-9d45ad4697d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>titulo</th>\n",
       "      <th>direccion</th>\n",
       "      <th>precio</th>\n",
       "      <th>operacion</th>\n",
       "      <th>barrio</th>\n",
       "      <th>dormitorios</th>\n",
       "      <th>banos</th>\n",
       "      <th>metros</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>INVERSORES. REUS NORTE. GRAN OFERTA LANZAMIENT...</td>\n",
       "      <td>GUTIERREZ y ARENAL GRANDE</td>\n",
       "      <td>U$S 124.200</td>\n",
       "      <td>Venta</td>\n",
       "      <td>Villa Muñoz</td>\n",
       "      <td>2 dormitorios</td>\n",
       "      <td>1 Baños</td>\n",
       "      <td>54 Mts</td>\n",
       "      <td>https://www.gallito.com.uy/inversores-reus-nor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Torre Arenas una nueva forma de vivir en la Ra...</td>\n",
       "      <td>O´Higgins y 18 de Diciembre</td>\n",
       "      <td>U$S 347.000</td>\n",
       "      <td>Venta</td>\n",
       "      <td>Malvin</td>\n",
       "      <td>2 dormitorios</td>\n",
       "      <td>2 Baños</td>\n",
       "      <td>99 Mts</td>\n",
       "      <td>https://www.gallito.com.uy/torre-arenas-una-nu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>IMPERIAL VENDE TERRENO CON MEJORAS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>U$S 65.000</td>\n",
       "      <td>Venta</td>\n",
       "      <td>Cerrito</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300 Mts</td>\n",
       "      <td>https://www.gallito.com.uy/imperial-vende-terr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>UNA CASA ESTILO CAMPO EN LA CIUDAD !!</td>\n",
       "      <td>Venancio Benavidez y Arapey</td>\n",
       "      <td>U$S 225.000</td>\n",
       "      <td>Venta</td>\n",
       "      <td>Prado</td>\n",
       "      <td>2 dormitorios</td>\n",
       "      <td>2 Baños</td>\n",
       "      <td>130 Mts</td>\n",
       "      <td>https://www.gallito.com.uy/una-casa-estilo-cam...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Apartamento en Venta 2 dormitorios y Patio en con</td>\n",
       "      <td>Evaristo Ciganda 1099 esq Joaquin Suarez - Ref...</td>\n",
       "      <td>U$S 98.000</td>\n",
       "      <td>Venta</td>\n",
       "      <td>Atahualpa</td>\n",
       "      <td>2 dormitorios</td>\n",
       "      <td>1 Baños</td>\n",
       "      <td>100 Mts</td>\n",
       "      <td>https://www.gallito.com.uy/apartamento-en-vent...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              titulo  \\\n",
       "0  INVERSORES. REUS NORTE. GRAN OFERTA LANZAMIENT...   \n",
       "1  Torre Arenas una nueva forma de vivir en la Ra...   \n",
       "2                 IMPERIAL VENDE TERRENO CON MEJORAS   \n",
       "3              UNA CASA ESTILO CAMPO EN LA CIUDAD !!   \n",
       "4  Apartamento en Venta 2 dormitorios y Patio en con   \n",
       "\n",
       "                                           direccion       precio operacion  \\\n",
       "0                          GUTIERREZ y ARENAL GRANDE  U$S 124.200     Venta   \n",
       "1                        O´Higgins y 18 de Diciembre  U$S 347.000     Venta   \n",
       "2                                                NaN   U$S 65.000     Venta   \n",
       "3                        Venancio Benavidez y Arapey  U$S 225.000     Venta   \n",
       "4  Evaristo Ciganda 1099 esq Joaquin Suarez - Ref...   U$S 98.000     Venta   \n",
       "\n",
       "        barrio    dormitorios    banos   metros  \\\n",
       "0  Villa Muñoz  2 dormitorios  1 Baños   54 Mts   \n",
       "1       Malvin  2 dormitorios  2 Baños   99 Mts   \n",
       "2      Cerrito            NaN      NaN  300 Mts   \n",
       "3        Prado  2 dormitorios  2 Baños  130 Mts   \n",
       "4    Atahualpa  2 dormitorios  1 Baños  100 Mts   \n",
       "\n",
       "                                                 url  \n",
       "0  https://www.gallito.com.uy/inversores-reus-nor...  \n",
       "1  https://www.gallito.com.uy/torre-arenas-una-nu...  \n",
       "2  https://www.gallito.com.uy/imperial-vende-terr...  \n",
       "3  https://www.gallito.com.uy/una-casa-estilo-cam...  \n",
       "4  https://www.gallito.com.uy/apartamento-en-vent...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "48cc16d3-dcde-4a1a-845b-ddbf84b182be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Se limpia la columna precio\n",
    "df['precio'] = (\n",
    "    df['precio']\n",
    "    .astype(str)\n",
    "    .str.replace('U\\\\$S', '', regex=True)   # eliminar el símbolo U$S\n",
    "    .str.replace('.', '', regex=False)      # eliminar puntos como separadores de miles\n",
    "    .str.replace(',', '.', regex=False)     # si hay comas como separadores decimales\n",
    "    .str.strip()                            # eliminar espacios en blanco\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57a3cc36-bb6b-4912-8e15-0015f5942f57",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['precio'] = pd.to_numeric(df['precio'], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f35a92ad-587d-4902-afa5-552c01270b04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count       2,000.00\n",
       "mean      242,711.63\n",
       "std       282,473.84\n",
       "min             1.00\n",
       "25%       105,000.00\n",
       "50%       161,178.00\n",
       "75%       270,000.00\n",
       "max     2,600,000.00\n",
       "Name: precio, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['precio'].head()\n",
    "df['precio'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "052edd2a-49db-4376-a16d-9f7a89c7d430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "franja_precio\n",
       "medio    669\n",
       "bajo     668\n",
       "alto     663\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Se crea la nueva variable \"Rango\"\n",
    "df['franja_precio'] = pd.qcut(df['precio'], q=3, labels=['bajo', 'medio', 'alto'])\n",
    "\n",
    "# Verificamos distribución\n",
    "df['franja_precio'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "808e93b5-7cf6-4f4d-98ee-56e8eb9b2611",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Se eliminan columnas que no se utilizaran para modelar\n",
    "df = df.drop('precio', axis=1)\n",
    "df = df.drop('operacion', axis=1)\n",
    "df = df.drop('url', axis=1)\n",
    "df = df.drop('titulo', axis=1)\n",
    "df = df.drop('direccion', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "accf114b-596c-46a9-92ac-eef832e0f822",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Limpieza de valores\n",
    "df['metros'] = (\n",
    "    df['metros']\n",
    "    .astype(str)\n",
    "    .str.replace(' Mts', '', regex=False)\n",
    "    .str.replace('.', '', regex=False)\n",
    "    .str.strip()\n",
    ")\n",
    "df['metros'] = pd.to_numeric(df['metros'], errors='coerce') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3168c68e-bb79-41f8-8764-436ae6d3e459",
   "metadata": {},
   "outputs": [],
   "source": [
    "def limpiar_dormitorios(x):\n",
    "    if pd.isna(x):\n",
    "        return np.nan\n",
    "    if 'Monoambiente' in x:\n",
    "        return 0\n",
    "    else:\n",
    "        try:\n",
    "            return int(x.split()[0])\n",
    "        except:\n",
    "            return np.nan\n",
    "\n",
    "df['dormitorios'] = df['dormitorios'].apply(limpiar_dormitorios)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cd27451c-2d37-47f2-b5c3-f5462d67f3e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def limpiar_banos(x):\n",
    "    if pd.isna(x):\n",
    "        return np.nan\n",
    "    if 'Más de' in x:\n",
    "        return 4  # Consideramos \"Más de 3 baños\" como 4\n",
    "    else:\n",
    "        try:\n",
    "            return int(x.split()[0])\n",
    "        except:\n",
    "            return np.nan\n",
    "\n",
    "df['banos'] = df['banos'].apply(limpiar_banos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "080b5de1-e40f-4d59-b014-5ef59097c46a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2000 entries, 0 to 1999\n",
      "Data columns (total 3 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   metros       1937 non-null   float64\n",
      " 1   dormitorios  1545 non-null   float64\n",
      " 2   banos        1887 non-null   float64\n",
      "dtypes: float64(3)\n",
      "memory usage: 47.0 KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>metros</th>\n",
       "      <th>dormitorios</th>\n",
       "      <th>banos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>54.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>99.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>300.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>130.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   metros  dormitorios  banos\n",
       "0   54.00         2.00   1.00\n",
       "1   99.00         2.00   2.00\n",
       "2  300.00          NaN    NaN\n",
       "3  130.00         2.00   2.00\n",
       "4  100.00         2.00   1.00"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['metros', 'dormitorios', 'banos']].info()\n",
    "df[['metros', 'dormitorios', 'banos']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7e33b529-56a9-408e-866c-26eb630d1088",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cantidad y porcentaje de nulos por columna\n",
    "nulos_total = df.isnull().sum()\n",
    "nulos_pct = (nulos_total / len(df)) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9e925722-64c6-4e49-82de-a51eba9f4414",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nulos_totales</th>\n",
       "      <th>porcentaje_nulos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dormitorios</th>\n",
       "      <td>455</td>\n",
       "      <td>22.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>banos</th>\n",
       "      <td>113</td>\n",
       "      <td>5.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metros</th>\n",
       "      <td>63</td>\n",
       "      <td>3.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>barrio</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>franja_precio</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               nulos_totales  porcentaje_nulos\n",
       "dormitorios              455             22.75\n",
       "banos                    113              5.65\n",
       "metros                    63              3.15\n",
       "barrio                     0              0.00\n",
       "franja_precio              0              0.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Tabla resumen\n",
    "nulos_df = pd.DataFrame({\n",
    "    'nulos_totales': nulos_total,\n",
    "    'porcentaje_nulos': nulos_pct.round(2)\n",
    "}).sort_values(by='porcentaje_nulos', ascending=False)\n",
    "\n",
    "display(nulos_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7d2a21f0-0d15-4fe9-814c-62d7703219d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputar 'dormitorios' por la moda\n",
    "moda_dorm = df['dormitorios'].mode()[0]\n",
    "df['dormitorios'] = df['dormitorios'].fillna(moda_dorm)\n",
    "\n",
    "# Imputar 'banos' por la moda\n",
    "moda_banos = df['banos'].mode()[0]\n",
    "df['banos'] = df['banos'].fillna(moda_banos)\n",
    "\n",
    "# Imputar 'metros' por la mediana\n",
    "mediana_metros = df['metros'].median()\n",
    "df['metros'] = df['metros'].fillna(mediana_metros)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a3b47afa-4e83-4e16-9208-19084594eccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nulos_totales</th>\n",
       "      <th>porcentaje_nulos</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>barrio</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dormitorios</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>banos</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metros</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>franja_precio</th>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               nulos_totales  porcentaje_nulos\n",
       "barrio                     0              0.00\n",
       "dormitorios                0              0.00\n",
       "banos                      0              0.00\n",
       "metros                     0              0.00\n",
       "franja_precio              0              0.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cantidad y porcentaje de nulos por columna\n",
    "nulos_total = df.isnull().sum()\n",
    "nulos_pct = (nulos_total / len(df)) * 100\n",
    "\n",
    "# Tabla resumen\n",
    "nulos_df = pd.DataFrame({\n",
    "    'nulos_totales': nulos_total,\n",
    "    'porcentaje_nulos': nulos_pct.round(2)\n",
    "}).sort_values(by='porcentaje_nulos', ascending=False)\n",
    "\n",
    "display(nulos_df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d8940319-2f3f-490c-9ffa-482fbc62ff3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>median</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>dormitorios</th>\n",
       "      <td>2,000.00</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.85</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>banos</th>\n",
       "      <td>2,000.00</td>\n",
       "      <td>1.63</td>\n",
       "      <td>0.93</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metros</th>\n",
       "      <td>2,000.00</td>\n",
       "      <td>159.63</td>\n",
       "      <td>379.98</td>\n",
       "      <td>1.00</td>\n",
       "      <td>54.00</td>\n",
       "      <td>79.00</td>\n",
       "      <td>79.00</td>\n",
       "      <td>156.00</td>\n",
       "      <td>8,747.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               count   mean    std  min   25%  median   50%    75%      max\n",
       "dormitorios 2,000.00   2.18   0.85 1.00  2.00    2.00  2.00   3.00     4.00\n",
       "banos       2,000.00   1.63   0.93 1.00  1.00    1.00  1.00   2.00     4.00\n",
       "metros      2,000.00 159.63 379.98 1.00 54.00   79.00 79.00 156.00 8,747.00"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Resumen estadístico personalizado para todas las columnas numéricas\n",
    "resumen_estadistico = df.describe().T\n",
    "\n",
    "# Agregar la mediana manualmente (porque describe() no la incluye)\n",
    "resumen_estadistico['median'] = df.median(numeric_only=True)\n",
    "\n",
    "# Reordenar columnas para mejor visualización\n",
    "resumen_estadistico = resumen_estadistico[[\n",
    "    'count', 'mean', 'std', 'min', '25%', 'median', '50%', '75%', 'max'\n",
    "]]\n",
    "\n",
    "display(resumen_estadistico)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "555514c3-7c02-4a64-8488-4c2f81c45698",
   "metadata": {},
   "source": [
    "Variable barrio\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e3d671a7-2abf-4fef-acf9-dfce4c2beaba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total de barrios únicos: 53\n",
      "- 10 Has.\n",
      "- Aguada\n",
      "- Aires Puros\n",
      "- Arroyo Seco\n",
      "- Atahualpa\n",
      "- Barrio Sur\n",
      "- Bella Vista\n",
      "- Belvedere\n",
      "- Bolivar M. Modelo\n",
      "- Brazo Oriental\n",
      "- Buceo\n",
      "- Capurro\n",
      "- Carrasco\n",
      "- Carrasco Norte\n",
      "- Centro\n",
      "- Cerrito\n",
      "- Cerro\n",
      "- Ciudad Vieja\n",
      "- Colon\n",
      "- Cordon\n",
      "- Goes\n",
      "- Golf\n",
      "- Jacinto Vera\n",
      "- La Blanqueada\n",
      "- La Comercial\n",
      "- Larrañaga\n",
      "- Las Acacias\n",
      "- Malvin\n",
      "- Malvin Norte\n",
      "- Manga\n",
      "- Maroñas\n",
      "- Monoambiente\n",
      "- Nuevo Paris\n",
      "- Otros\n",
      "- Palermo\n",
      "- Parque Batlle\n",
      "- Parque Rodo\n",
      "- Paso Carrasco\n",
      "- Peñarol\n",
      "- Piedras Blancas\n",
      "- Pocitos\n",
      "- Pocitos Nuevo\n",
      "- Prado\n",
      "- Puerto Buceo\n",
      "- Punta Carretas\n",
      "- Punta Gorda\n",
      "- Reducto\n",
      "- Sayago\n",
      "- Tres Cruces\n",
      "- Union\n",
      "- Villa Biarritz\n",
      "- Villa Española\n",
      "- Villa Muñoz\n"
     ]
    }
   ],
   "source": [
    "# Ver todas las categorías únicas en la columna 'barrio'\n",
    "barrios_unicos = df['barrio'].dropna().unique()\n",
    "\n",
    "# Mostrarlas ordenadas\n",
    "barrios_ordenados = sorted(barrios_unicos)\n",
    "\n",
    "# Mostrar el total y los valores\n",
    "print(f\"Total de barrios únicos: {len(barrios_ordenados)}\")\n",
    "for barrio in barrios_ordenados:\n",
    "    print(\"-\", barrio)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7134bcd9-a331-4212-b62a-94de31989a49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#correlacion\n",
    "# Seleccionamos solo columnas numéricas\n",
    "df_numericas = df.select_dtypes(include=['float64', 'int64'])\n",
    "\n",
    "# Calculamos la matriz de correlación\n",
    "correlacion = df_numericas.corr()\n",
    "\n",
    "# Graficamos el heatmap\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.heatmap(correlacion, annot=True, fmt=\".2f\", cmap='coolwarm', vmin=-1, vmax=1)\n",
    "plt.title(\"Matriz de correlación entre variables numéricas\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "34c6ea85-9d79-4568-b0eb-1cc9a5357f97",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.\nA suitable version of pyarrow or fastparquet is required for parquet support.\nTrying to import the above resulted in these errors:\n - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.\n - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet.",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mImportError\u001b[39m                               Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[20]\u001b[39m\u001b[32m, line 3\u001b[39m\n\u001b[32m      1\u001b[39m df.to_csv(\u001b[33m\"\u001b[39m\u001b[33mdata/inmuebles_clean.csv\u001b[39m\u001b[33m\"\u001b[39m, index=\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[32m----> \u001b[39m\u001b[32m3\u001b[39m \u001b[43mdf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mto_parquet\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mdata/inmuebles_clean.parquet\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Obligatorio_ML/venv/lib/python3.12/site-packages/pandas/util/_decorators.py:333\u001b[39m, in \u001b[36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    327\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) > num_allow_args:\n\u001b[32m    328\u001b[39m     warnings.warn(\n\u001b[32m    329\u001b[39m         msg.format(arguments=_format_argument_list(allow_args)),\n\u001b[32m    330\u001b[39m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[32m    331\u001b[39m         stacklevel=find_stack_level(),\n\u001b[32m    332\u001b[39m     )\n\u001b[32m--> \u001b[39m\u001b[32m333\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Obligatorio_ML/venv/lib/python3.12/site-packages/pandas/core/frame.py:3118\u001b[39m, in \u001b[36mDataFrame.to_parquet\u001b[39m\u001b[34m(self, path, engine, compression, index, partition_cols, storage_options, **kwargs)\u001b[39m\n\u001b[32m   3037\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   3038\u001b[39m \u001b[33;03mWrite a DataFrame to the binary parquet format.\u001b[39;00m\n\u001b[32m   3039\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m   3114\u001b[39m \u001b[33;03m>>> content = f.read()\u001b[39;00m\n\u001b[32m   3115\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   3116\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpandas\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mio\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mparquet\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m to_parquet\n\u001b[32m-> \u001b[39m\u001b[32m3118\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mto_parquet\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   3119\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m   3120\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3121\u001b[39m \u001b[43m    \u001b[49m\u001b[43mengine\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3122\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcompression\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3123\u001b[39m \u001b[43m    \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m=\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3124\u001b[39m \u001b[43m    \u001b[49m\u001b[43mpartition_cols\u001b[49m\u001b[43m=\u001b[49m\u001b[43mpartition_cols\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3125\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3126\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   3127\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Obligatorio_ML/venv/lib/python3.12/site-packages/pandas/io/parquet.py:478\u001b[39m, in \u001b[36mto_parquet\u001b[39m\u001b[34m(df, path, engine, compression, index, storage_options, partition_cols, filesystem, **kwargs)\u001b[39m\n\u001b[32m    476\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(partition_cols, \u001b[38;5;28mstr\u001b[39m):\n\u001b[32m    477\u001b[39m     partition_cols = [partition_cols]\n\u001b[32m--> \u001b[39m\u001b[32m478\u001b[39m impl = \u001b[43mget_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    480\u001b[39m path_or_buf: FilePath | WriteBuffer[\u001b[38;5;28mbytes\u001b[39m] = io.BytesIO() \u001b[38;5;28;01mif\u001b[39;00m path \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m path\n\u001b[32m    482\u001b[39m impl.write(\n\u001b[32m    483\u001b[39m     df,\n\u001b[32m    484\u001b[39m     path_or_buf,\n\u001b[32m   (...)\u001b[39m\u001b[32m    490\u001b[39m     **kwargs,\n\u001b[32m    491\u001b[39m )\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Obligatorio_ML/venv/lib/python3.12/site-packages/pandas/io/parquet.py:68\u001b[39m, in \u001b[36mget_engine\u001b[39m\u001b[34m(engine)\u001b[39m\n\u001b[32m     65\u001b[39m         \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[32m     66\u001b[39m             error_msgs += \u001b[33m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m - \u001b[39m\u001b[33m\"\u001b[39m + \u001b[38;5;28mstr\u001b[39m(err)\n\u001b[32m---> \u001b[39m\u001b[32m68\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mImportError\u001b[39;00m(\n\u001b[32m     69\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mUnable to find a usable engine; \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     70\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mtried using: \u001b[39m\u001b[33m'\u001b[39m\u001b[33mpyarrow\u001b[39m\u001b[33m'\u001b[39m\u001b[33m, \u001b[39m\u001b[33m'\u001b[39m\u001b[33mfastparquet\u001b[39m\u001b[33m'\u001b[39m\u001b[33m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m     71\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mA suitable version of \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     72\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mpyarrow or fastparquet is required for parquet \u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     73\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33msupport.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m     74\u001b[39m         \u001b[33m\"\u001b[39m\u001b[33mTrying to import the above resulted in these errors:\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     75\u001b[39m         \u001b[33mf\u001b[39m\u001b[33m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00merror_msgs\u001b[38;5;132;01m}\u001b[39;00m\u001b[33m\"\u001b[39m\n\u001b[32m     76\u001b[39m     )\n\u001b[32m     78\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m engine == \u001b[33m\"\u001b[39m\u001b[33mpyarrow\u001b[39m\u001b[33m\"\u001b[39m:\n\u001b[32m     79\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m PyArrowImpl()\n",
      "\u001b[31mImportError\u001b[39m: Unable to find a usable engine; tried using: 'pyarrow', 'fastparquet'.\nA suitable version of pyarrow or fastparquet is required for parquet support.\nTrying to import the above resulted in these errors:\n - Missing optional dependency 'pyarrow'. pyarrow is required for parquet support. Use pip or conda to install pyarrow.\n - Missing optional dependency 'fastparquet'. fastparquet is required for parquet support. Use pip or conda to install fastparquet."
     ]
    }
   ],
   "source": [
    "df.to_csv(\"data/inmuebles_clean.csv\", index=False)\n",
    "\n",
    "df.to_parquet(\"data/inmuebles_clean.parquet\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67a6753c-d079-4e7e-a5e4-f4a4672beaba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Modelo"
      ],
      "metadata": {
        "id": "fGMA7H7X6CC6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#!pip install wandb"
      ],
      "metadata": {
        "id": "asJjP4Yr6yjJ"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install category_encoders"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sYyue0Fl67YS",
        "outputId": "ea0cc876-e3cc-49e8-8b7c-2d6f89f5034c"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting category_encoders\n",
            "  Downloading category_encoders-2.8.1-py3-none-any.whl.metadata (7.9 kB)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (2.0.2)\n",
            "Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (2.2.2)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.0.1)\n",
            "Requirement already satisfied: scikit-learn>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.6.1)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.15.3)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (0.14.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2025.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.6.0->category_encoders) (1.5.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.6.0->category_encoders) (3.6.0)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.9.0->category_encoders) (24.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.0.5->category_encoders) (1.17.0)\n",
            "Downloading category_encoders-2.8.1-py3-none-any.whl (85 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.7/85.7 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: category_encoders\n",
            "Successfully installed category_encoders-2.8.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import wandb\n",
        "wandb.login()  # Pegá tu API Key desde https://wandb.ai/authorize"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0F2CCEfv6ylY",
        "outputId": "8b8a9684-dda4-4e8a-df6d-ff325eee1bed"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#!pip install category_encoders wandb scikit-learn pandas matplotlib\n",
        "\n"
      ],
      "metadata": {
        "id": "9fRSvsgl6ynZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "QLKBhudeAMTo",
        "outputId": "ec3a3730-c934-47fe-8d0e-2339ecac9866"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-bed8cbcd-b0b2-4cf4-bb51-79d9c47c14d4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-bed8cbcd-b0b2-4cf4-bb51-79d9c47c14d4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving inmuebles_clean.csv to inmuebles_clean.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import (\n",
        "    classification_report,\n",
        "    accuracy_score,\n",
        "    precision_score,\n",
        "    recall_score,\n",
        "    f1_score\n",
        ")\n",
        "from category_encoders import TargetEncoder\n",
        "import wandb\n",
        "import wandb.sklearn\n",
        "\n",
        "# 1. Cargar datos\n",
        "df = pd.read_csv(\"inmuebles_clean.csv\")\n",
        "\n",
        "# 2. Separar X, y\n",
        "X = df.drop(\"franja_precio\", axis=1)\n",
        "y = df[\"franja_precio\"]\n",
        "\n",
        "# 3. Dividir en Train/Test (80/20)\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "# 4. Configuración W&B\n",
        "wandb.init(project=\"modelo_inmuebles\", name=\"RF_con_kfold\", reinit=True)\n",
        "\n",
        "# 5. KFold + Entrenamiento\n",
        "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "fold = 0\n",
        "reports = []\n",
        "\n",
        "for train_idx, val_idx in skf.split(X_train, y_train):\n",
        "    fold += 1\n",
        "    print(f\"\\n📂 Fold {fold}\")\n",
        "\n",
        "    X_tr, X_val = X_train.iloc[train_idx], X_train.iloc[val_idx]\n",
        "    y_tr, y_val = y_train.iloc[train_idx], y_train.iloc[val_idx]\n",
        "\n",
        "    # 6. Target Encoding solo en entrenamiento (para 'barrio')\n",
        "    encoder = TargetEncoder(cols=[\"barrio\"])\n",
        "    encoder.fit(X_tr, y_tr)\n",
        "    X_tr_enc = encoder.transform(X_tr)\n",
        "    X_val_enc = encoder.transform(X_val)\n",
        "    X_test_enc = encoder.transform(X_test)  # También transformamos test ahora\n",
        "\n",
        "    # 7. Modelo\n",
        "    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "    clf.fit(X_tr_enc, y_tr)\n",
        "    preds = clf.predict(X_val_enc)\n",
        "\n",
        "    # 8. Métricas\n",
        "    report = classification_report(y_val, preds, output_dict=True)\n",
        "    print(classification_report(y_val, preds))\n",
        "    reports.append(report)\n",
        "\n",
        "    # Log W&B por fold\n",
        "    wandb.log({\n",
        "        f\"fold_{fold}_accuracy\": report[\"accuracy\"],\n",
        "        f\"fold_{fold}_precision\": report[\"weighted avg\"][\"precision\"],\n",
        "        f\"fold_{fold}_recall\": report[\"weighted avg\"][\"recall\"],\n",
        "        f\"fold_{fold}_f1\": report[\"weighted avg\"][\"f1-score\"]\n",
        "    })\n",
        "\n",
        "# 9. Entrenar en todo el X_train y predecir en Test\n",
        "encoder.fit(X_train, y_train)\n",
        "X_train_enc = encoder.transform(X_train)\n",
        "X_test_enc = encoder.transform(X_test)\n",
        "\n",
        "final_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "final_model.fit(X_train_enc, y_train)\n",
        "final_preds = final_model.predict(X_test_enc)\n",
        "final_probas = final_model.predict_proba(X_test_enc)\n",
        "labels = final_model.classes_\n",
        "\n",
        "print(\"\\n🔍 Evaluación Final en Test:\")\n",
        "print(classification_report(y_test, final_preds))\n",
        "\n",
        "# 10. Log manual de métricas finales en W&B\n",
        "wandb.log({\n",
        "    \"final_accuracy\": accuracy_score(y_test, final_preds),\n",
        "    \"final_precision\": precision_score(y_test, final_preds, average='weighted'),\n",
        "    \"final_recall\": recall_score(y_test, final_preds, average='weighted'),\n",
        "    \"final_f1\": f1_score(y_test, final_preds, average='weighted')\n",
        "})\n",
        "\n",
        "# 11. Matriz de confusión (funciona bien)\n",
        "wandb.sklearn.plot_confusion_matrix(y_test, final_preds, labels=labels)\n",
        "\n",
        "# 12. Finalizar sesión\n",
        "wandb.finish()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "SjSKFrtNABPZ",
        "outputId": "7e0401e3-054e-404c-c4cc-8094f00b633b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Using a boolean value for 'reinit' is deprecated. Use 'return_previous' or 'finish_previous' instead.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Tracking run with wandb version 0.20.1"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Run data is saved locally in <code>/content/wandb/run-20250706_132805-3jurb7t8</code>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Syncing run <strong><a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles/runs/3jurb7t8' target=\"_blank\">RF_con_kfold</a></strong> to <a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/developer-guide' target=\"_blank\">docs</a>)<br>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View project at <a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles' target=\"_blank\">https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View run at <a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles/runs/3jurb7t8' target=\"_blank\">https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles/runs/3jurb7t8</a>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📂 Fold 1\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.98      0.99      0.99       106\n",
            "        bajo       0.99      0.99      0.99       107\n",
            "       medio       0.98      0.97      0.98       107\n",
            "\n",
            "    accuracy                           0.98       320\n",
            "   macro avg       0.98      0.98      0.98       320\n",
            "weighted avg       0.98      0.98      0.98       320\n",
            "\n",
            "\n",
            "📂 Fold 2\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.99      0.95      0.97       106\n",
            "        bajo       0.96      1.00      0.98       107\n",
            "       medio       0.98      0.97      0.98       107\n",
            "\n",
            "    accuracy                           0.97       320\n",
            "   macro avg       0.98      0.97      0.97       320\n",
            "weighted avg       0.98      0.97      0.97       320\n",
            "\n",
            "\n",
            "📂 Fold 3\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.95      0.98      0.96       106\n",
            "        bajo       0.99      0.96      0.98       107\n",
            "       medio       0.98      0.97      0.98       107\n",
            "\n",
            "    accuracy                           0.97       320\n",
            "   macro avg       0.97      0.97      0.97       320\n",
            "weighted avg       0.97      0.97      0.97       320\n",
            "\n",
            "\n",
            "📂 Fold 4\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.97      0.98      0.98       106\n",
            "        bajo       0.99      0.99      0.99       107\n",
            "       medio       0.98      0.97      0.98       107\n",
            "\n",
            "    accuracy                           0.98       320\n",
            "   macro avg       0.98      0.98      0.98       320\n",
            "weighted avg       0.98      0.98      0.98       320\n",
            "\n",
            "\n",
            "📂 Fold 5\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.99      0.97      0.98       106\n",
            "        bajo       0.98      1.00      0.99       107\n",
            "       medio       0.99      0.99      0.99       107\n",
            "\n",
            "    accuracy                           0.99       320\n",
            "   macro avg       0.99      0.99      0.99       320\n",
            "weighted avg       0.99      0.99      0.99       320\n",
            "\n",
            "\n",
            "🔍 Evaluación Final en Test:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        alto       0.97      0.97      0.97       133\n",
            "        bajo       0.97      0.96      0.97       133\n",
            "       medio       0.97      0.98      0.97       134\n",
            "\n",
            "    accuracy                           0.97       400\n",
            "   macro avg       0.97      0.97      0.97       400\n",
            "weighted avg       0.97      0.97      0.97       400\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<br>    <style><br>        .wandb-row {<br>            display: flex;<br>            flex-direction: row;<br>            flex-wrap: wrap;<br>            justify-content: flex-start;<br>            width: 100%;<br>        }<br>        .wandb-col {<br>            display: flex;<br>            flex-direction: column;<br>            flex-basis: 100%;<br>            flex: 1;<br>            padding: 10px;<br>        }<br>    </style><br><div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>final_accuracy</td><td>▁</td></tr><tr><td>final_f1</td><td>▁</td></tr><tr><td>final_precision</td><td>▁</td></tr><tr><td>final_recall</td><td>▁</td></tr><tr><td>fold_1_accuracy</td><td>▁</td></tr><tr><td>fold_1_f1</td><td>▁</td></tr><tr><td>fold_1_precision</td><td>▁</td></tr><tr><td>fold_1_recall</td><td>▁</td></tr><tr><td>fold_2_accuracy</td><td>▁</td></tr><tr><td>fold_2_f1</td><td>▁</td></tr><tr><td>fold_2_precision</td><td>▁</td></tr><tr><td>fold_2_recall</td><td>▁</td></tr><tr><td>fold_3_accuracy</td><td>▁</td></tr><tr><td>fold_3_f1</td><td>▁</td></tr><tr><td>fold_3_precision</td><td>▁</td></tr><tr><td>fold_3_recall</td><td>▁</td></tr><tr><td>fold_4_accuracy</td><td>▁</td></tr><tr><td>fold_4_f1</td><td>▁</td></tr><tr><td>fold_4_precision</td><td>▁</td></tr><tr><td>fold_4_recall</td><td>▁</td></tr><tr><td>fold_5_accuracy</td><td>▁</td></tr><tr><td>fold_5_f1</td><td>▁</td></tr><tr><td>fold_5_precision</td><td>▁</td></tr><tr><td>fold_5_recall</td><td>▁</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>final_accuracy</td><td>0.97</td></tr><tr><td>final_f1</td><td>0.96999</td></tr><tr><td>final_precision</td><td>0.97</td></tr><tr><td>final_recall</td><td>0.97</td></tr><tr><td>fold_1_accuracy</td><td>0.98438</td></tr><tr><td>fold_1_f1</td><td>0.98436</td></tr><tr><td>fold_1_precision</td><td>0.98437</td></tr><tr><td>fold_1_recall</td><td>0.98438</td></tr><tr><td>fold_2_accuracy</td><td>0.975</td></tr><tr><td>fold_2_f1</td><td>0.97496</td></tr><tr><td>fold_2_precision</td><td>0.97552</td></tr><tr><td>fold_2_recall</td><td>0.975</td></tr><tr><td>fold_3_accuracy</td><td>0.97188</td></tr><tr><td>fold_3_f1</td><td>0.97196</td></tr><tr><td>fold_3_precision</td><td>0.97241</td></tr><tr><td>fold_3_recall</td><td>0.97188</td></tr><tr><td>fold_4_accuracy</td><td>0.98125</td></tr><tr><td>fold_4_f1</td><td>0.98125</td></tr><tr><td>fold_4_precision</td><td>0.98128</td></tr><tr><td>fold_4_recall</td><td>0.98125</td></tr><tr><td>fold_5_accuracy</td><td>0.9875</td></tr><tr><td>fold_5_f1</td><td>0.98747</td></tr><tr><td>fold_5_precision</td><td>0.98755</td></tr><tr><td>fold_5_recall</td><td>0.9875</td></tr></table><br/></div></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              " View run <strong style=\"color:#cdcd00\">RF_con_kfold</strong> at: <a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles/runs/3jurb7t8' target=\"_blank\">https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles/runs/3jurb7t8</a><br> View project at: <a href='https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles' target=\"_blank\">https://wandb.ai/jifernandezsandar-ort/modelo_inmuebles</a><br>Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 0 other file(s)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Find logs at: <code>./wandb/run-20250706_132805-3jurb7t8/logs</code>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Pr9Q3h60ABWY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ster26FNABY9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "b8eWJ38m6ypz"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}barrio,dormitorios,banos,metros,franja_precio
Villa Muñoz,2.0,1.0,54.0,medio
Malvin,2.0,2.0,99.0,alto
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Atahualpa,2.0,1.0,100.0,bajo
Aguada,2.0,1.0,86.0,bajo
Malvin Norte,2.0,1.0,72.0,bajo
Carrasco,4.0,4.0,150.0,alto
Villa Española,1.0,1.0,40.0,bajo
Carrasco,2.0,3.0,139.0,alto
Parque Batlle,2.0,2.0,365.0,alto
Carrasco,2.0,1.0,1035.0,medio
Piedras Blancas,2.0,4.0,142.0,bajo
Bella Vista,3.0,2.0,95.0,bajo
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Prado,3.0,2.0,388.0,alto
Centro,1.0,1.0,60.0,medio
Brazo Oriental,3.0,1.0,90.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Buceo,1.0,1.0,130.0,medio
Monoambiente,2.0,1.0,32.0,bajo
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Pocitos,1.0,1.0,67.0,alto
Atahualpa,4.0,2.0,100.0,medio
Puerto Buceo,3.0,2.0,160.0,alto
Pocitos,3.0,3.0,115.0,alto
Centro,2.0,4.0,801.0,alto
Carrasco,4.0,3.0,230.0,alto
La Blanqueada,1.0,1.0,1.0,bajo
Cordon,2.0,2.0,100.0,medio
Cordon,1.0,1.0,4.0,medio
Prado,3.0,2.0,120.0,alto
Parque Batlle,2.0,4.0,405.0,alto
Aguada,1.0,1.0,40.0,bajo
Piedras Blancas,1.0,1.0,33.0,bajo
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Cerro,2.0,3.0,181.0,medio
Prado,2.0,1.0,71.0,medio
Pocitos,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Punta Carretas,1.0,1.0,37.0,medio
Cordon,2.0,1.0,45.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Cordon,1.0,1.0,48.0,bajo
Manga,4.0,2.0,632.0,alto
Pocitos,1.0,1.0,67.0,alto
Prado,2.0,1.0,65.0,medio
Parque Batlle,2.0,4.0,405.0,alto
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Carrasco,2.0,3.0,139.0,alto
Piedras Blancas,2.0,4.0,142.0,bajo
Prado,3.0,2.0,388.0,alto
Brazo Oriental,2.0,1.0,60.0,medio
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Centro,2.0,4.0,801.0,alto
La Blanqueada,1.0,1.0,39.0,bajo
Cordon,2.0,2.0,100.0,medio
Prado,3.0,2.0,120.0,alto
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin Norte,2.0,1.0,749.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Villa Muñoz,2.0,1.0,54.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Prado,4.0,4.0,507.0,alto
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Carrasco,4.0,4.0,150.0,alto
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Prado,3.0,2.0,90.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Puerto Buceo,3.0,2.0,160.0,alto
Atahualpa,2.0,1.0,65.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Aguada,2.0,1.0,86.0,bajo
Malvin,2.0,2.0,72.0,alto
Monoambiente,2.0,1.0,34.0,bajo
Tres Cruces,2.0,3.0,336.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Bella Vista,3.0,2.0,95.0,bajo
Centro,1.0,1.0,60.0,medio
Buceo,1.0,1.0,130.0,medio
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Atahualpa,4.0,2.0,100.0,medio
Pocitos,3.0,4.0,165.0,alto
Pocitos,3.0,3.0,115.0,alto
Carrasco,4.0,3.0,230.0,alto
Cordon,1.0,1.0,4.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Reducto,1.0,1.0,60.0,bajo
Cerro,2.0,3.0,181.0,medio
Aires Puros,2.0,3.0,340.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Pocitos,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Punta Carretas,1.0,1.0,37.0,medio
Centro,2.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Pocitos,4.0,4.0,189.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Cordon,1.0,1.0,48.0,bajo
Prado,1.0,1.0,67.0,medio
Parque Batlle,2.0,1.0,62.0,bajo
Manga,4.0,2.0,632.0,alto
Union,2.0,2.0,82.0,medio
Pocitos,1.0,1.0,67.0,alto
Prado,2.0,1.0,65.0,medio
Centro,2.0,1.0,79.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Carrasco,2.0,3.0,139.0,alto
Belvedere,2.0,1.0,195.0,bajo
Piedras Blancas,2.0,4.0,142.0,bajo
Prado,3.0,2.0,388.0,alto
Cordon,1.0,1.0,54.0,medio
Brazo Oriental,2.0,1.0,60.0,medio
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Goes,3.0,1.0,99.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Malvin,1.0,1.0,47.0,medio
Centro,2.0,4.0,801.0,alto
La Blanqueada,1.0,1.0,39.0,bajo
Buceo,1.0,1.0,62.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Prado,3.0,2.0,120.0,alto
Punta Gorda,4.0,4.0,750.0,alto
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Aguada,1.0,1.0,38.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Prado,4.0,4.0,507.0,alto
Cordon,2.0,1.0,76.0,medio
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Carrasco,4.0,4.0,150.0,alto
Reducto,2.0,1.0,99.0,medio
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Centro,1.0,1.0,40.0,bajo
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Prado,3.0,2.0,90.0,alto
Malvin,2.0,1.0,55.0,medio
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Cordon,1.0,1.0,70.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Atahualpa,2.0,1.0,65.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Capurro,4.0,2.0,252.0,medio
Carrasco,3.0,3.0,200.0,alto
Buceo,3.0,1.0,111.0,medio
Aguada,2.0,1.0,86.0,bajo
Malvin,2.0,2.0,72.0,alto
Monoambiente,2.0,1.0,34.0,bajo
Tres Cruces,2.0,3.0,336.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Jacinto Vera,3.0,2.0,200.0,alto
Maroñas,3.0,1.0,580.0,bajo
Bella Vista,3.0,2.0,95.0,bajo
Centro,1.0,1.0,60.0,medio
Cordon,3.0,2.0,115.0,medio
Belvedere,3.0,1.0,79.0,bajo
Pocitos Nuevo,4.0,3.0,158.0,alto
Buceo,1.0,1.0,130.0,medio
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Atahualpa,4.0,2.0,100.0,medio
Pocitos,3.0,4.0,165.0,alto
Pocitos,3.0,3.0,115.0,alto
Carrasco,4.0,3.0,230.0,alto
Cordon,1.0,1.0,4.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Reducto,1.0,1.0,60.0,bajo
Palermo,2.0,1.0,79.0,bajo
Centro,2.0,1.0,79.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Arroyo Seco,2.0,1.0,57.0,medio
Cerro,2.0,3.0,181.0,medio
Aires Puros,2.0,3.0,340.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Centro,2.0,1.0,28.0,bajo
Prado,3.0,1.0,70.0,medio
Pocitos,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Carrasco,3.0,4.0,320.0,alto
Punta Carretas,1.0,1.0,37.0,medio
Centro,2.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Pocitos,4.0,4.0,189.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Cordon,1.0,1.0,48.0,bajo
Prado,1.0,1.0,67.0,medio
Malvin,2.0,1.0,50.0,medio
Parque Batlle,2.0,1.0,62.0,bajo
Manga,4.0,2.0,632.0,alto
Union,2.0,2.0,82.0,medio
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Prado,2.0,1.0,65.0,medio
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Carrasco,2.0,3.0,139.0,alto
Belvedere,2.0,1.0,195.0,bajo
Piedras Blancas,2.0,4.0,142.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Pocitos,2.0,2.0,156.0,alto
Prado,3.0,2.0,388.0,alto
Prado,2.0,1.0,50.0,bajo
Cordon,1.0,1.0,54.0,medio
Brazo Oriental,2.0,1.0,60.0,medio
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Goes,3.0,1.0,99.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
Punta Carretas,1.0,1.0,52.0,medio
Malvin,2.0,1.0,177.0,alto
Centro,2.0,4.0,801.0,alto
La Blanqueada,1.0,1.0,39.0,bajo
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Prado,3.0,2.0,120.0,alto
Punta Gorda,4.0,4.0,750.0,alto
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin,3.0,2.0,220.0,medio
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Belvedere,2.0,1.0,51.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Aguada,1.0,1.0,38.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Cordon,2.0,1.0,76.0,medio
Buceo,3.0,1.0,71.0,medio
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Carrasco,4.0,4.0,150.0,alto
Palermo,2.0,1.0,54.0,medio
Reducto,2.0,1.0,99.0,medio
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Centro,1.0,1.0,40.0,bajo
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Pocitos,3.0,3.0,133.0,alto
Prado,3.0,2.0,90.0,alto
Malvin,2.0,1.0,55.0,medio
Pocitos,3.0,3.0,112.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Malvin,2.0,1.0,55.0,medio
Cordon,1.0,1.0,70.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Atahualpa,2.0,1.0,65.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Capurro,4.0,2.0,252.0,medio
Carrasco,3.0,3.0,200.0,alto
Pocitos,3.0,4.0,216.0,alto
Buceo,2.0,2.0,70.0,alto
Buceo,3.0,1.0,111.0,medio
Carrasco Norte,3.0,3.0,813.0,alto
Aguada,2.0,1.0,86.0,bajo
Malvin,2.0,2.0,72.0,alto
Monoambiente,2.0,1.0,34.0,bajo
Tres Cruces,2.0,3.0,336.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Jacinto Vera,3.0,2.0,200.0,alto
Maroñas,3.0,1.0,580.0,bajo
Bella Vista,3.0,2.0,95.0,bajo
Centro,1.0,1.0,60.0,medio
Cordon,3.0,2.0,115.0,medio
La Blanqueada,1.0,1.0,60.0,bajo
Belvedere,3.0,1.0,79.0,bajo
Pocitos Nuevo,4.0,3.0,158.0,alto
Atahualpa,4.0,2.0,100.0,medio
Buceo,1.0,1.0,130.0,medio
Pocitos,2.0,1.0,20.0,bajo
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Punta Gorda,3.0,2.0,120.0,alto
Centro,2.0,2.0,80.0,medio
Ciudad Vieja,2.0,1.0,81.0,medio
Atahualpa,4.0,2.0,100.0,medio
Pocitos,3.0,4.0,165.0,alto
Pocitos,3.0,3.0,115.0,alto
Carrasco,4.0,3.0,230.0,alto
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Buceo,1.0,1.0,50.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Reducto,1.0,1.0,60.0,bajo
Buceo,3.0,2.0,178.0,alto
Palermo,2.0,1.0,79.0,bajo
Centro,2.0,1.0,79.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Cordon,1.0,1.0,38.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
Cerro,2.0,3.0,181.0,medio
Aires Puros,2.0,3.0,340.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Centro,2.0,1.0,28.0,bajo
Prado,3.0,1.0,70.0,medio
Prado,3.0,2.0,192.0,alto
Pocitos,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Aires Puros,4.0,2.0,410.0,bajo
Carrasco,3.0,4.0,320.0,alto
Punta Carretas,1.0,1.0,37.0,medio
Centro,2.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Pocitos,4.0,4.0,189.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Cordon,1.0,1.0,48.0,bajo
Prado,1.0,1.0,67.0,medio
Malvin,2.0,1.0,50.0,medio
Parque Batlle,2.0,1.0,62.0,bajo
Manga,4.0,2.0,632.0,alto
Union,2.0,2.0,82.0,medio
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Prado,2.0,1.0,65.0,medio
Malvin Norte,3.0,2.0,100.0,alto
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Malvin,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Centro,1.0,1.0,44.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Punta Carretas,4.0,2.0,81.0,alto
Carrasco,2.0,3.0,139.0,alto
Belvedere,2.0,1.0,195.0,bajo
Barrio Sur,2.0,1.0,71.0,medio
Piedras Blancas,2.0,4.0,142.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Punta Carretas,2.0,2.0,169.0,alto
Pocitos,2.0,2.0,156.0,alto
Prado,3.0,2.0,388.0,alto
Malvin,1.0,1.0,50.0,medio
Prado,2.0,1.0,50.0,bajo
Cordon,1.0,1.0,54.0,medio
Brazo Oriental,2.0,1.0,60.0,medio
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Goes,3.0,1.0,99.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
Centro,3.0,2.0,165.0,alto
Punta Carretas,1.0,1.0,52.0,medio
Malvin,2.0,1.0,177.0,alto
Centro,2.0,4.0,801.0,alto
Parque Batlle,2.0,2.0,60.0,alto
Tres Cruces,1.0,1.0,49.0,medio
La Blanqueada,1.0,1.0,39.0,bajo
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Punta Gorda,4.0,4.0,750.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin,3.0,2.0,220.0,medio
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Belvedere,2.0,1.0,51.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Aguada,1.0,1.0,38.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Cordon,2.0,1.0,76.0,medio
Buceo,3.0,1.0,71.0,medio
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Carrasco,4.0,4.0,150.0,alto
Palermo,2.0,1.0,54.0,medio
Reducto,2.0,1.0,99.0,medio
Malvin Norte,3.0,1.0,74.0,bajo
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Centro,1.0,1.0,40.0,bajo
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
La Comercial,2.0,1.0,55.0,bajo
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Pocitos,3.0,3.0,133.0,alto
Barrio Sur,1.0,1.0,47.0,bajo
Prado,3.0,2.0,90.0,alto
Malvin,2.0,1.0,55.0,medio
Pocitos,3.0,3.0,112.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Pocitos,2.0,1.0,124.0,alto
Malvin,2.0,1.0,55.0,medio
Cordon,1.0,1.0,70.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Pocitos Nuevo,3.0,1.0,135.0,alto
Atahualpa,2.0,1.0,65.0,bajo
Malvin Norte,1.0,1.0,45.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Capurro,4.0,2.0,252.0,medio
Carrasco,3.0,3.0,200.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Punta Carretas,4.0,3.0,177.0,alto
Pocitos,3.0,4.0,216.0,alto
Buceo,2.0,2.0,70.0,alto
Monoambiente,2.0,1.0,21.0,bajo
Buceo,3.0,1.0,111.0,medio
La Blanqueada,1.0,1.0,52.0,bajo
Carrasco Norte,3.0,3.0,813.0,alto
Aguada,2.0,1.0,86.0,bajo
Cordon,2.0,1.0,45.0,bajo
Malvin,2.0,2.0,72.0,alto
Pocitos,1.0,1.0,64.0,medio
Monoambiente,2.0,1.0,34.0,bajo
La Comercial,2.0,3.0,978.0,alto
Tres Cruces,2.0,3.0,336.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Barrio Sur,2.0,1.0,55.0,medio
Jacinto Vera,3.0,2.0,200.0,alto
Maroñas,3.0,1.0,580.0,bajo
Centro,4.0,2.0,94.0,medio
Bella Vista,3.0,2.0,95.0,bajo
Union,1.0,1.0,44.0,bajo
Centro,1.0,1.0,60.0,medio
Cordon,3.0,2.0,115.0,medio
La Blanqueada,1.0,1.0,60.0,bajo
Belvedere,3.0,1.0,79.0,bajo
Pocitos Nuevo,4.0,3.0,158.0,alto
Atahualpa,4.0,2.0,100.0,medio
Buceo,1.0,1.0,130.0,medio
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Pocitos,2.0,1.0,20.0,bajo
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Punta Gorda,3.0,2.0,120.0,alto
Centro,2.0,2.0,80.0,medio
Ciudad Vieja,2.0,1.0,81.0,medio
Pocitos,3.0,2.0,124.0,medio
Atahualpa,4.0,2.0,100.0,medio
Arroyo Seco,2.0,1.0,53.0,medio
Pocitos,3.0,4.0,165.0,alto
Malvin,2.0,2.0,77.0,alto
Pocitos,3.0,3.0,115.0,alto
Atahualpa,1.0,1.0,54.0,bajo
Carrasco,4.0,3.0,230.0,alto
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Buceo,1.0,1.0,50.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Reducto,1.0,1.0,60.0,bajo
Buceo,3.0,2.0,178.0,alto
Palermo,2.0,1.0,79.0,bajo
Centro,2.0,1.0,79.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Cordon,1.0,1.0,38.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
Cerro,2.0,3.0,181.0,medio
Aires Puros,2.0,3.0,340.0,medio
Prado,2.0,1.0,71.0,medio
Centro,2.0,1.0,28.0,bajo
Prado,3.0,1.0,70.0,medio
Prado,3.0,2.0,192.0,alto
Tres Cruces,3.0,2.0,70.0,bajo
Pocitos,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Aires Puros,4.0,2.0,410.0,bajo
Carrasco,3.0,4.0,320.0,alto
Punta Carretas,1.0,1.0,37.0,medio
Centro,2.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Pocitos,4.0,4.0,189.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Reducto,3.0,1.0,75.0,bajo
Cordon,1.0,1.0,48.0,bajo
Goes,3.0,2.0,120.0,medio
Parque Rodo,2.0,1.0,67.0,medio
Prado,1.0,1.0,67.0,medio
Malvin,2.0,1.0,50.0,medio
Parque Batlle,2.0,1.0,62.0,bajo
Manga,4.0,2.0,632.0,alto
Union,2.0,2.0,82.0,medio
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Prado,2.0,1.0,65.0,medio
Atahualpa,3.0,2.0,382.0,alto
Malvin Norte,3.0,2.0,100.0,alto
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Malvin,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Centro,1.0,1.0,44.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Cordon,3.0,2.0,80.0,medio
Prado,2.0,1.0,68.0,medio
Monoambiente,2.0,1.0,31.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Otros,1.0,1.0,517.0,alto
Jacinto Vera,2.0,1.0,562.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Punta Carretas,4.0,2.0,81.0,alto
Carrasco,2.0,3.0,139.0,alto
Belvedere,2.0,1.0,195.0,bajo
Barrio Sur,2.0,1.0,71.0,medio
Piedras Blancas,2.0,4.0,142.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Punta Carretas,2.0,2.0,169.0,alto
Pocitos,2.0,2.0,156.0,alto
Ciudad Vieja,2.0,4.0,385.0,alto
Prado,3.0,2.0,388.0,alto
Malvin,1.0,1.0,50.0,medio
Prado,2.0,1.0,50.0,bajo
Cordon,1.0,1.0,54.0,medio
La Blanqueada,3.0,2.0,107.0,medio
Brazo Oriental,2.0,1.0,60.0,medio
Centro,1.0,1.0,40.0,bajo
Malvin,2.0,1.0,80.0,medio
Punta Carretas,2.0,1.0,8.0,bajo
La Blanqueada,1.0,1.0,55.0,medio
Pocitos,2.0,4.0,500.0,alto
La Blanqueada,2.0,1.0,49.0,bajo
Goes,3.0,1.0,99.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
Centro,3.0,2.0,165.0,alto
Punta Carretas,1.0,1.0,52.0,medio
Malvin,2.0,1.0,177.0,alto
Centro,2.0,4.0,801.0,alto
Parque Batlle,2.0,2.0,60.0,alto
Tres Cruces,1.0,1.0,49.0,medio
Aguada,1.0,1.0,30.0,bajo
La Blanqueada,1.0,1.0,39.0,bajo
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Punta Gorda,4.0,4.0,750.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Ciudad Vieja,3.0,2.0,105.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin,3.0,2.0,220.0,medio
Aguada,2.0,1.0,55.0,bajo
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Belvedere,2.0,1.0,51.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Aguada,1.0,1.0,38.0,bajo
Malvin,3.0,3.0,129.0,alto
Monoambiente,2.0,1.0,35.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Cordon,2.0,1.0,76.0,medio
Buceo,3.0,1.0,71.0,medio
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Carrasco,4.0,4.0,150.0,alto
Palermo,2.0,1.0,54.0,medio
Malvin Norte,1.0,1.0,35.0,bajo
Reducto,2.0,1.0,99.0,medio
Malvin Norte,3.0,1.0,74.0,bajo
Cordon,2.0,1.0,54.0,medio
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Centro,1.0,1.0,40.0,bajo
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Buceo,2.0,2.0,272.0,alto
Brazo Oriental,3.0,1.0,90.0,medio
La Comercial,2.0,1.0,55.0,bajo
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Pocitos,3.0,3.0,133.0,alto
Barrio Sur,1.0,1.0,47.0,bajo
Prado,3.0,2.0,90.0,alto
Malvin,2.0,1.0,55.0,medio
Centro,2.0,1.0,101.0,medio
Pocitos,3.0,3.0,112.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Prado,3.0,2.0,107.0,medio
Tres Cruces,1.0,1.0,45.0,medio
Pocitos,2.0,1.0,124.0,alto
Malvin,2.0,1.0,55.0,medio
Reducto,3.0,1.0,55.0,bajo
Cordon,1.0,1.0,70.0,bajo
Monoambiente,2.0,1.0,21.0,bajo
Centro,4.0,2.0,148.0,alto
Cordon,1.0,1.0,39.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Pocitos Nuevo,3.0,1.0,135.0,alto
Atahualpa,2.0,1.0,65.0,bajo
Malvin Norte,1.0,1.0,45.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Capurro,4.0,2.0,252.0,medio
Palermo,3.0,2.0,131.0,alto
Carrasco,3.0,3.0,200.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Punta Carretas,4.0,3.0,177.0,alto
Pocitos,3.0,4.0,216.0,alto
Prado,2.0,3.0,558.0,alto
Cordon,1.0,1.0,64.0,medio
Buceo,2.0,2.0,70.0,alto
Monoambiente,2.0,1.0,21.0,bajo
Buceo,3.0,1.0,111.0,medio
La Blanqueada,1.0,1.0,52.0,bajo
Golf,2.0,3.0,191.0,alto
Carrasco Norte,3.0,3.0,813.0,alto
Aguada,2.0,1.0,86.0,bajo
Cordon,2.0,1.0,45.0,bajo
Malvin,2.0,2.0,72.0,alto
Pocitos,1.0,1.0,64.0,medio
Monoambiente,2.0,1.0,34.0,bajo
La Comercial,2.0,3.0,978.0,alto
Tres Cruces,2.0,3.0,336.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Barrio Sur,2.0,1.0,55.0,medio
Jacinto Vera,3.0,2.0,200.0,alto
Maroñas,3.0,1.0,580.0,bajo
Centro,4.0,2.0,94.0,medio
La Blanqueada,2.0,1.0,51.0,bajo
Bella Vista,3.0,2.0,95.0,bajo
Union,1.0,1.0,44.0,bajo
Centro,1.0,1.0,60.0,medio
Cordon,3.0,2.0,115.0,medio
La Blanqueada,1.0,1.0,60.0,bajo
Belvedere,3.0,1.0,79.0,bajo
Pocitos Nuevo,4.0,3.0,158.0,alto
Atahualpa,4.0,2.0,100.0,medio
Buceo,1.0,1.0,130.0,medio
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Pocitos,2.0,1.0,20.0,bajo
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Punta Gorda,3.0,2.0,120.0,alto
Centro,2.0,2.0,80.0,medio
Ciudad Vieja,2.0,1.0,81.0,medio
Pocitos,3.0,2.0,124.0,medio
Atahualpa,4.0,2.0,100.0,medio
Arroyo Seco,2.0,1.0,53.0,medio
Pocitos,3.0,4.0,165.0,alto
Malvin,2.0,2.0,77.0,alto
Brazo Oriental,2.0,1.0,79.0,bajo
Pocitos,3.0,3.0,115.0,alto
Atahualpa,1.0,1.0,54.0,bajo
Carrasco,4.0,3.0,230.0,alto
Centro,2.0,2.0,90.0,medio
Centro,2.0,4.0,577.0,alto
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Buceo,1.0,1.0,50.0,medio
Monoambiente,2.0,1.0,38.0,bajo
Parque Rodo,2.0,4.0,300.0,alto
Cordon,3.0,2.0,87.0,medio
Reducto,1.0,1.0,60.0,bajo
Buceo,3.0,2.0,178.0,alto
Palermo,2.0,1.0,79.0,bajo
Centro,2.0,1.0,79.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Cordon,1.0,1.0,38.0,bajo
Aguada,2.0,1.0,54.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
Cerro,2.0,3.0,181.0,medio
Aires Puros,2.0,3.0,340.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Centro,2.0,1.0,28.0,bajo
Prado,3.0,1.0,70.0,medio
Prado,3.0,2.0,192.0,alto
Tres Cruces,3.0,2.0,70.0,bajo
La Blanqueada,1.0,1.0,43.0,bajo
Pocitos,2.0,1.0,79.0,bajo
Punta Carretas,2.0,1.0,79.0,bajo
Villa Española,1.0,1.0,40.0,bajo
Aires Puros,4.0,2.0,410.0,bajo
Carrasco,3.0,4.0,320.0,alto
Punta Carretas,1.0,1.0,37.0,medio
Centro,2.0,1.0,70.0,medio
Palermo,2.0,1.0,79.0,alto
Cordon,2.0,1.0,45.0,bajo
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Parque Rodo,3.0,3.0,114.0,alto
Pocitos,4.0,4.0,189.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Reducto,3.0,1.0,75.0,bajo
Cordon,1.0,1.0,48.0,bajo
Goes,3.0,2.0,120.0,medio
Manga,2.0,1.0,86.0,bajo
Carrasco,2.0,1.0,58.0,medio
Parque Rodo,2.0,1.0,67.0,medio
Prado,1.0,1.0,67.0,medio
Malvin,2.0,1.0,50.0,medio
Colon,3.0,1.0,260.0,bajo
Parque Batlle,2.0,1.0,62.0,bajo
Union,2.0,2.0,82.0,medio
Carrasco,3.0,1.0,80.0,medio
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Prado,2.0,1.0,65.0,medio
Atahualpa,3.0,2.0,382.0,alto
Malvin Norte,3.0,2.0,100.0,alto
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Malvin,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Centro,1.0,1.0,44.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Monoambiente,2.0,1.0,43.0,medio
Aguada,1.0,1.0,40.0,bajo
Otros,2.0,1.0,1.0,alto
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Malvin,3.0,3.0,200.0,alto
Pocitos,2.0,1.0,79.0,bajo
Cordon,3.0,2.0,80.0,medio
Prado,2.0,1.0,68.0,medio
Monoambiente,2.0,1.0,31.0,bajo
Malvin,2.0,2.0,99.0,alto
Union,2.0,1.0,176.0,bajo
Otros,1.0,1.0,517.0,alto
Jacinto Vera,2.0,1.0,562.0,alto
Puerto Buceo,2.0,2.0,67.0,medio
Tres Cruces,1.0,1.0,58.0,bajo
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Reducto,2.0,1.0,60.0,bajo
Punta Carretas,4.0,2.0,81.0,alto
Carrasco,2.0,3.0,139.0,alto
Belvedere,2.0,1.0,195.0,bajo
Tres Cruces,1.0,1.0,58.0,bajo
Barrio Sur,2.0,1.0,71.0,medio
Piedras Blancas,2.0,4.0,142.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Punta Carretas,2.0,2.0,169.0,alto
Pocitos,2.0,2.0,156.0,alto
Ciudad Vieja,2.0,4.0,385.0,alto
Brazo Oriental,2.0,3.0,242.0,alto
Prado,3.0,2.0,388.0,alto
Centro,4.0,4.0,176.0,alto
Malvin,1.0,1.0,50.0,medio
Punta Carretas,2.0,1.0,754.0,alto
Prado,2.0,1.0,50.0,bajo
Cordon,1.0,1.0,54.0,medio
La Blanqueada,3.0,2.0,107.0,medio
Brazo Oriental,2.0,1.0,60.0,medio
Centro,1.0,1.0,40.0,bajo
Malvin,2.0,1.0,80.0,medio
Punta Carretas,2.0,1.0,8.0,bajo
10 Has.,2.0,1.0,79.0,alto
La Blanqueada,1.0,1.0,55.0,medio
Pocitos,2.0,4.0,500.0,alto
La Blanqueada,3.0,1.0,80.0,medio
Cordon,1.0,1.0,57.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Goes,3.0,1.0,99.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
Centro,3.0,2.0,165.0,alto
Punta Carretas,1.0,1.0,52.0,medio
Malvin,2.0,1.0,177.0,alto
Centro,2.0,4.0,801.0,alto
Parque Batlle,2.0,2.0,60.0,alto
Tres Cruces,1.0,1.0,49.0,medio
Aguada,1.0,1.0,30.0,bajo
La Blanqueada,1.0,1.0,39.0,bajo
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Monoambiente,2.0,2.0,217.0,medio
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Punta Gorda,4.0,4.0,750.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Malvin,2.0,2.0,71.0,alto
Malvin,4.0,4.0,145.0,alto
Punta Carretas,3.0,2.0,75.0,alto
Ciudad Vieja,3.0,2.0,105.0,alto
Pocitos Nuevo,4.0,3.0,233.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Malvin,3.0,2.0,220.0,medio
Aguada,2.0,1.0,55.0,bajo
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Otros,2.0,4.0,755.0,alto
Monoambiente,2.0,1.0,34.0,bajo
Belvedere,2.0,1.0,51.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Aguada,1.0,1.0,38.0,bajo
Malvin,3.0,3.0,129.0,alto
Monoambiente,2.0,1.0,35.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Punta Carretas,1.0,1.0,50.0,medio
Cerrito,2.0,1.0,300.0,bajo
Prado,2.0,2.0,130.0,alto
Puerto Buceo,4.0,2.0,160.0,alto
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Cordon,2.0,1.0,76.0,medio
Buceo,3.0,1.0,71.0,medio
Buceo,2.0,1.0,170.0,medio
Malvin Norte,2.0,1.0,72.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Pocitos,2.0,3.0,66.0,alto
Carrasco,4.0,4.0,150.0,alto
Palermo,2.0,1.0,54.0,medio
Malvin Norte,1.0,1.0,35.0,bajo
Reducto,2.0,1.0,99.0,medio
Malvin Norte,3.0,1.0,74.0,bajo
Cordon,2.0,1.0,54.0,medio
Union,2.0,1.0,78.0,bajo
La Blanqueada,2.0,1.0,50.0,medio
Carrasco,2.0,1.0,1035.0,medio
Centro,1.0,1.0,40.0,bajo
Peñarol,2.0,1.0,8747.0,alto
Pocitos,2.0,2.0,134.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Buceo,2.0,2.0,272.0,alto
Brazo Oriental,3.0,1.0,90.0,medio
La Comercial,2.0,1.0,55.0,bajo
Prado,3.0,1.0,180.0,medio
Monoambiente,2.0,1.0,46.0,bajo
Pocitos,3.0,3.0,133.0,alto
Barrio Sur,1.0,1.0,47.0,bajo
Prado,3.0,2.0,90.0,alto
Malvin,2.0,1.0,55.0,medio
Centro,2.0,1.0,101.0,medio
Pocitos,3.0,3.0,112.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Aguada,3.0,2.0,130.0,alto
Prado,3.0,2.0,107.0,medio
Tres Cruces,1.0,1.0,45.0,medio
Pocitos,2.0,1.0,124.0,alto
Malvin,2.0,1.0,55.0,medio
Reducto,3.0,1.0,55.0,bajo
Cordon,1.0,1.0,70.0,bajo
Monoambiente,2.0,1.0,21.0,bajo
Centro,4.0,2.0,148.0,alto
Cordon,1.0,1.0,39.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Pocitos Nuevo,3.0,1.0,135.0,alto
Pocitos,3.0,3.0,137.0,alto
Atahualpa,2.0,1.0,65.0,bajo
Malvin Norte,1.0,1.0,45.0,bajo
Tres Cruces,1.0,1.0,38.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Capurro,4.0,2.0,252.0,medio
Palermo,3.0,2.0,131.0,alto
Carrasco,3.0,3.0,200.0,alto
Centro,2.0,4.0,576.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Punta Gorda,2.0,2.0,305.0,alto
Cordon,1.0,1.0,53.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Punta Carretas,4.0,3.0,177.0,alto
Pocitos,3.0,4.0,216.0,alto
Prado,2.0,3.0,558.0,alto
Cordon,1.0,1.0,64.0,medio
Buceo,2.0,2.0,70.0,alto
Monoambiente,2.0,1.0,21.0,bajo
Buceo,3.0,1.0,111.0,medio
La Blanqueada,1.0,1.0,52.0,bajo
Golf,2.0,3.0,191.0,alto
Carrasco Norte,3.0,3.0,813.0,alto
Brazo Oriental,4.0,1.0,600.0,medio
Aguada,2.0,1.0,86.0,bajo
Cordon,2.0,1.0,45.0,bajo
Malvin,2.0,2.0,72.0,alto
Pocitos,2.0,2.0,98.0,alto
Pocitos,1.0,1.0,64.0,medio
Monoambiente,2.0,1.0,34.0,bajo
La Comercial,2.0,3.0,978.0,alto
Tres Cruces,2.0,3.0,336.0,alto
Pocitos,3.0,2.0,104.0,alto
La Blanqueada,3.0,2.0,73.0,medio
Barrio Sur,2.0,1.0,55.0,medio
Reducto,2.0,1.0,61.0,bajo
Jacinto Vera,3.0,2.0,200.0,alto
Maroñas,3.0,1.0,580.0,bajo
Centro,4.0,2.0,94.0,medio
La Blanqueada,2.0,1.0,51.0,bajo
Bella Vista,3.0,2.0,95.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
Union,1.0,1.0,44.0,bajo
Centro,1.0,1.0,60.0,medio
Cordon,3.0,2.0,115.0,medio
La Blanqueada,1.0,1.0,60.0,bajo
Belvedere,3.0,1.0,79.0,bajo
Pocitos Nuevo,4.0,3.0,158.0,alto
Atahualpa,4.0,2.0,100.0,medio
Buceo,1.0,1.0,130.0,medio
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Pocitos,2.0,1.0,20.0,bajo
Belvedere,4.0,2.0,239.0,medio
La Blanqueada,2.0,1.0,71.0,medio
Reducto,2.0,1.0,67.0,bajo
Tres Cruces,1.0,1.0,83.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Punta Gorda,3.0,2.0,120.0,alto
Centro,2.0,2.0,80.0,medio
Ciudad Vieja,2.0,1.0,81.0,medio
Pocitos,3.0,2.0,124.0,medio
Atahualpa,4.0,2.0,100.0,medio
Arroyo Seco,2.0,1.0,53.0,medio
Pocitos,3.0,4.0,165.0,alto
Malvin,2.0,2.0,77.0,alto
Brazo Oriental,2.0,1.0,79.0,bajo
Las Acacias,3.0,2.0,300.0,medio
Pocitos,3.0,3.0,115.0,alto
Centro,1.0,1.0,92.0,medio
Aguada,2.0,2.0,58.0,medio
Atahualpa,1.0,1.0,54.0,bajo
Carrasco,4.0,3.0,230.0,alto
Centro,2.0,2.0,90.0,medio
Centro,2.0,4.0,577.0,alto
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Buceo,1.0,1.0,50.0,medio
Monoambiente,2.0,1.0,38.0,bajo
Parque Rodo,2.0,4.0,300.0,alto
Cordon,3.0,2.0,87.0,medio
Reducto,1.0,1.0,60.0,bajo
Buceo,3.0,2.0,178.0,alto
Palermo,2.0,1.0,79.0,bajo
Centro,2.0,1.0,79.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Punta Gorda,2.0,4.0,510.0,alto
Cordon,1.0,1.0,38.0,bajo
Aguada,2.0,1.0,54.0,bajo
Aires Puros,2.0,3.0,340.0,medio
Centro,2.0,1.0,28.0,bajo
Tres Cruces,3.0,2.0,70.0,bajo
Punta Carretas,2.0,1.0,79.0,bajo
Centro,2.0,1.0,70.0,medio
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Pocitos,4.0,4.0,189.0,alto
Goes,3.0,2.0,120.0,medio
Parque Batlle,2.0,1.0,62.0,bajo
Pocitos,2.0,1.0,55.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Centro,2.0,1.0,61.0,medio
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Punta Carretas,2.0,2.0,169.0,alto
Ciudad Vieja,2.0,4.0,385.0,alto
Malvin,1.0,1.0,50.0,medio
Punta Carretas,2.0,1.0,754.0,alto
Centro,1.0,1.0,40.0,bajo
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,2.0,152.0,alto
Cordon,1.0,1.0,57.0,medio
Goes,3.0,1.0,99.0,medio
Centro,3.0,2.0,165.0,alto
Malvin,2.0,1.0,177.0,alto
Tres Cruces,1.0,1.0,49.0,medio
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Monoambiente,2.0,2.0,217.0,medio
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Jacinto Vera,2.0,1.0,571.0,alto
Malvin,3.0,2.0,220.0,medio
Otros,2.0,4.0,755.0,alto
Belvedere,2.0,1.0,51.0,bajo
Aguada,1.0,1.0,38.0,bajo
Puerto Buceo,1.0,2.0,83.0,alto
Prado,2.0,2.0,130.0,alto
Malvin Norte,2.0,1.0,72.0,bajo
Pocitos,2.0,2.0,134.0,alto
Prado,3.0,2.0,107.0,medio
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Pocitos,2.0,1.0,124.0,alto
Pocitos,2.0,2.0,81.0,alto
La Blanqueada,1.0,1.0,1.0,bajo
Centro,2.0,4.0,576.0,alto
Punta Gorda,2.0,2.0,305.0,alto
Monoambiente,2.0,1.0,39.0,bajo
Pocitos,3.0,4.0,216.0,alto
Malvin,3.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Pocitos,2.0,2.0,98.0,alto
Jacinto Vera,3.0,2.0,200.0,alto
Centro,4.0,2.0,94.0,medio
Centro,1.0,1.0,60.0,medio
Malvin Norte,3.0,1.0,84.0,medio
Pocitos Nuevo,4.0,3.0,158.0,alto
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Parque Rodo,3.0,1.0,63.0,alto
Punta Gorda,3.0,2.0,120.0,alto
Punta Carretas,1.0,1.0,50.0,medio
Malvin,2.0,2.0,77.0,alto
Aguada,2.0,2.0,58.0,medio
Carrasco,4.0,3.0,230.0,alto
Buceo,1.0,1.0,50.0,medio
Buceo,3.0,2.0,178.0,alto
Palermo,2.0,1.0,79.0,bajo
Cordon,1.0,1.0,38.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
La Blanqueada,4.0,2.0,140.0,alto
Prado,3.0,1.0,70.0,medio
Aguada,2.0,1.0,57.0,medio
Pocitos,2.0,1.0,79.0,bajo
Palermo,2.0,1.0,79.0,alto
Punta Carretas,2.0,2.0,73.0,alto
Union,2.0,2.0,82.0,medio
Prado,2.0,1.0,65.0,medio
Centro,1.0,1.0,44.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Monoambiente,2.0,1.0,43.0,medio
Sayago,2.0,1.0,200.0,alto
Aguada,1.0,1.0,40.0,bajo
Malvin,3.0,3.0,200.0,alto
Jacinto Vera,1.0,1.0,71.0,medio
Malvin Norte,2.0,1.0,79.0,bajo
Prado,2.0,1.0,68.0,medio
Monoambiente,2.0,1.0,31.0,bajo
Malvin,2.0,2.0,99.0,alto
Punta Carretas,4.0,2.0,81.0,alto
Brazo Oriental,2.0,1.0,60.0,medio
La Blanqueada,3.0,1.0,80.0,medio
Golf,2.0,4.0,499.0,alto
Pocitos,2.0,4.0,500.0,alto
Pocitos,3.0,4.0,152.0,alto
Punta Carretas,1.0,1.0,52.0,medio
Nuevo Paris,4.0,1.0,200.0,bajo
Parque Batlle,2.0,2.0,60.0,alto
Parque Batlle,4.0,3.0,217.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Punta Carretas,3.0,2.0,75.0,alto
Pocitos Nuevo,4.0,3.0,233.0,alto
Aguada,2.0,1.0,55.0,bajo
Malvin,3.0,3.0,129.0,alto
Cerrito,2.0,1.0,300.0,bajo
Puerto Buceo,4.0,2.0,160.0,alto
Buceo,2.0,1.0,170.0,medio
Carrasco,4.0,4.0,150.0,alto
Reducto,2.0,1.0,99.0,medio
La Blanqueada,2.0,1.0,50.0,medio
Centro,1.0,1.0,40.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Monoambiente,2.0,1.0,35.0,bajo
Barrio Sur,1.0,1.0,47.0,bajo
Pocitos,3.0,3.0,112.0,alto
Centro,3.0,1.0,69.0,medio
Malvin,2.0,1.0,55.0,medio
Cordon,1.0,1.0,70.0,bajo
Monoambiente,2.0,1.0,21.0,bajo
Pocitos Nuevo,3.0,1.0,135.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Pocitos,3.0,3.0,100.0,alto
Cordon,1.0,1.0,64.0,medio
Buceo,2.0,2.0,70.0,alto
Golf,2.0,3.0,191.0,alto
Pocitos,1.0,1.0,64.0,medio
La Comercial,2.0,3.0,978.0,alto
Pocitos,3.0,2.0,104.0,alto
Reducto,2.0,1.0,61.0,bajo
Maroñas,3.0,1.0,580.0,bajo
Belvedere,3.0,1.0,79.0,bajo
Reducto,2.0,1.0,67.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Ciudad Vieja,2.0,1.0,81.0,medio
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Monoambiente,2.0,1.0,38.0,bajo
Cordon,3.0,2.0,87.0,medio
Reducto,1.0,1.0,60.0,bajo
Centro,2.0,1.0,79.0,alto
Cerro,2.0,3.0,181.0,medio
Union,3.0,1.0,74.0,bajo
La Blanqueada,1.0,1.0,43.0,bajo
Punta Carretas,1.0,1.0,37.0,medio
Cordon,2.0,1.0,45.0,bajo
Carrasco,2.0,1.0,58.0,medio
Parque Rodo,3.0,3.0,114.0,alto
Parque Batlle,2.0,1.0,45.0,bajo
Parque Rodo,2.0,1.0,67.0,medio
Prado,1.0,1.0,67.0,medio
Manga,4.0,2.0,632.0,alto
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Malvin Norte,3.0,2.0,100.0,alto
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Malvin,2.0,1.0,71.0,medio
Tres Cruces,1.0,1.0,58.0,bajo
Union,2.0,1.0,176.0,bajo
Puerto Buceo,2.0,2.0,67.0,medio
Prado,4.0,2.0,87.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Pocitos,1.0,1.0,40.0,medio
Carrasco,2.0,3.0,139.0,alto
Tres Cruces,1.0,1.0,58.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Pocitos,2.0,2.0,156.0,alto
Brazo Oriental,2.0,3.0,242.0,alto
Prado,3.0,2.0,388.0,alto
Centro,4.0,4.0,176.0,alto
Cordon,1.0,1.0,54.0,medio
10 Has.,2.0,1.0,79.0,alto
Punta Carretas,2.0,1.0,8.0,bajo
La Blanqueada,1.0,1.0,55.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Carrasco,3.0,1.0,80.0,medio
Pocitos,4.0,4.0,285.0,alto
Centro,2.0,4.0,801.0,alto
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Ciudad Vieja,3.0,2.0,105.0,alto
Malvin,4.0,4.0,145.0,alto
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Buceo,3.0,1.0,71.0,medio
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Pocitos,2.0,3.0,66.0,alto
Buceo,2.0,1.0,65.0,medio
Malvin Norte,1.0,1.0,35.0,bajo
Cordon,2.0,1.0,54.0,medio
Malvin Norte,3.0,1.0,74.0,bajo
Union,2.0,1.0,78.0,bajo
Punta Gorda,4.0,3.0,375.0,alto
Carrasco,2.0,1.0,1035.0,medio
Peñarol,2.0,1.0,8747.0,alto
Buceo,2.0,2.0,272.0,alto
La Comercial,2.0,1.0,55.0,bajo
Pocitos,3.0,3.0,133.0,alto
Centro,2.0,1.0,101.0,medio
Prado,3.0,2.0,90.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Reducto,3.0,1.0,55.0,bajo
Centro,4.0,2.0,148.0,alto
Cordon,1.0,1.0,39.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Atahualpa,2.0,1.0,65.0,bajo
Malvin Norte,1.0,1.0,45.0,bajo
Tres Cruces,1.0,1.0,38.0,bajo
Palermo,3.0,2.0,131.0,alto
Carrasco,3.0,3.0,200.0,alto
Cordon,1.0,1.0,53.0,medio
Buceo,3.0,1.0,111.0,medio
Brazo Oriental,4.0,1.0,600.0,medio
Aguada,2.0,1.0,86.0,bajo
Tres Cruces,2.0,3.0,336.0,alto
Bella Vista,3.0,2.0,95.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
La Blanqueada,1.0,1.0,60.0,bajo
La Blanqueada,2.0,1.0,71.0,medio
Brazo Oriental,2.0,1.0,79.0,bajo
Las Acacias,3.0,2.0,300.0,medio
Pocitos,3.0,4.0,165.0,alto
Centro,2.0,4.0,577.0,alto
Jacinto Vera,3.0,1.0,80.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Prado,3.0,2.0,192.0,alto
Villa Española,1.0,1.0,40.0,bajo
Aires Puros,4.0,2.0,410.0,bajo
Carrasco,3.0,4.0,320.0,alto
Malvin,1.0,1.0,43.0,medio
Reducto,3.0,1.0,75.0,bajo
Manga,2.0,1.0,86.0,bajo
Cordon,1.0,1.0,48.0,bajo
Malvin,2.0,1.0,50.0,medio
Colon,3.0,1.0,260.0,bajo
Reducto,2.0,2.0,225.0,medio
Atahualpa,3.0,2.0,382.0,alto
Maroñas,2.0,1.0,80.0,bajo
Otros,2.0,1.0,1.0,alto
Cordon,3.0,2.0,80.0,medio
Pocitos Nuevo,3.0,2.0,180.0,alto
Jacinto Vera,2.0,1.0,562.0,alto
Reducto,2.0,1.0,60.0,bajo
Belvedere,2.0,1.0,195.0,bajo
Villa Biarritz,3.0,4.0,201.0,alto
Barrio Sur,2.0,1.0,71.0,medio
Piedras Blancas,2.0,4.0,142.0,bajo
Aguada,3.0,3.0,108.0,bajo
Prado,2.0,1.0,50.0,bajo
La Blanqueada,3.0,2.0,107.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
La Blanqueada,1.0,1.0,39.0,bajo
Punta Gorda,4.0,4.0,750.0,alto
Malvin,2.0,2.0,71.0,alto
Monoambiente,2.0,1.0,32.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Bolivar M. Modelo,2.0,2.0,120.0,medio
Cordon,2.0,1.0,76.0,medio
Palermo,2.0,1.0,54.0,medio
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
Prado,3.0,1.0,180.0,medio
Malvin,2.0,1.0,55.0,medio
Pocitos,3.0,3.0,137.0,alto
Cerro,3.0,2.0,122.0,bajo
Capurro,4.0,2.0,252.0,medio
Punta Carretas,4.0,3.0,177.0,alto
Prado,2.0,3.0,558.0,alto
Monoambiente,2.0,1.0,21.0,bajo
La Blanqueada,1.0,1.0,52.0,bajo
Carrasco Norte,3.0,3.0,813.0,alto
Malvin,2.0,2.0,72.0,alto
Monoambiente,2.0,1.0,34.0,bajo
Pocitos,3.0,2.0,79.0,medio
La Blanqueada,3.0,2.0,73.0,medio
Barrio Sur,2.0,1.0,55.0,medio
Pocitos,3.0,3.0,137.0,alto
La Blanqueada,2.0,1.0,51.0,bajo
Union,1.0,1.0,44.0,bajo
Cordon,3.0,2.0,115.0,medio
Atahualpa,4.0,2.0,100.0,medio
Buceo,1.0,1.0,130.0,medio
Pocitos,2.0,1.0,20.0,bajo
Pocitos,1.0,1.0,56.0,medio
Aguada,1.0,1.0,30.0,bajo
Belvedere,4.0,2.0,239.0,medio
Tres Cruces,1.0,1.0,83.0,bajo
Centro,2.0,2.0,80.0,medio
Pocitos,3.0,2.0,124.0,medio
Arroyo Seco,2.0,1.0,53.0,medio
Atahualpa,4.0,2.0,100.0,medio
Pocitos,3.0,3.0,115.0,alto
Centro,1.0,1.0,92.0,medio
Atahualpa,1.0,1.0,54.0,bajo
Centro,2.0,2.0,90.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Punta Gorda,2.0,4.0,510.0,alto
Aguada,2.0,1.0,54.0,bajo
Aires Puros,2.0,3.0,340.0,medio
Centro,2.0,1.0,28.0,bajo
Tres Cruces,3.0,2.0,70.0,bajo
Punta Carretas,2.0,1.0,79.0,bajo
Centro,2.0,1.0,70.0,medio
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Pocitos,4.0,4.0,189.0,alto
Goes,3.0,2.0,120.0,medio
La Comercial,2.0,1.0,110.0,bajo
Parque Batlle,2.0,1.0,62.0,bajo
Pocitos,2.0,1.0,55.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Centro,2.0,1.0,61.0,medio
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Carrasco Norte,2.0,2.0,90.0,alto
Malvin,3.0,2.0,100.0,alto
Punta Carretas,2.0,2.0,169.0,alto
Ciudad Vieja,2.0,4.0,385.0,alto
Malvin,1.0,1.0,50.0,medio
Punta Carretas,2.0,1.0,754.0,alto
Centro,1.0,1.0,40.0,bajo
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,2.0,152.0,alto
Cordon,1.0,1.0,57.0,medio
Goes,3.0,1.0,99.0,medio
Centro,3.0,2.0,165.0,alto
Malvin,2.0,1.0,177.0,alto
Tres Cruces,1.0,1.0,49.0,medio
Punta Carretas,3.0,4.0,130.0,alto
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Monoambiente,2.0,2.0,217.0,medio
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Jacinto Vera,2.0,1.0,571.0,alto
Malvin,3.0,2.0,220.0,medio
Otros,2.0,4.0,755.0,alto
Belvedere,2.0,1.0,51.0,bajo
Aguada,1.0,1.0,38.0,bajo
Puerto Buceo,1.0,2.0,83.0,alto
Prado,2.0,2.0,130.0,alto
Malvin Norte,2.0,1.0,72.0,bajo
Punta Carretas,3.0,2.0,90.0,alto
Pocitos,2.0,2.0,134.0,alto
Prado,3.0,2.0,107.0,medio
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Pocitos,2.0,1.0,124.0,alto
Pocitos,2.0,2.0,81.0,alto
Atahualpa,2.0,1.0,51.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Centro,2.0,4.0,576.0,alto
Punta Gorda,2.0,2.0,305.0,alto
Monoambiente,2.0,1.0,39.0,bajo
Pocitos,3.0,4.0,216.0,alto
Puerto Buceo,1.0,1.0,45.0,alto
Malvin,3.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Pocitos,2.0,2.0,98.0,alto
Jacinto Vera,3.0,2.0,200.0,alto
Centro,4.0,2.0,94.0,medio
Monoambiente,2.0,1.0,33.0,bajo
Centro,1.0,1.0,60.0,medio
Malvin Norte,3.0,1.0,84.0,medio
Pocitos Nuevo,4.0,3.0,158.0,alto
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Parque Rodo,3.0,1.0,63.0,alto
Punta Gorda,3.0,2.0,120.0,alto
Punta Carretas,1.0,1.0,50.0,medio
Malvin,2.0,2.0,77.0,alto
Aguada,2.0,2.0,58.0,medio
Carrasco,4.0,3.0,230.0,alto
Buceo,1.0,1.0,50.0,medio
Buceo,3.0,2.0,178.0,alto
Buceo,2.0,1.0,298.0,alto
Palermo,2.0,1.0,79.0,bajo
Cordon,1.0,1.0,38.0,bajo
Villa Española,2.0,1.0,126.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
La Blanqueada,4.0,2.0,140.0,alto
Prado,3.0,1.0,70.0,medio
Aguada,2.0,1.0,57.0,medio
Pocitos,2.0,1.0,79.0,bajo
Palermo,2.0,1.0,79.0,alto
Ciudad Vieja,3.0,2.0,113.0,medio
Punta Carretas,2.0,2.0,73.0,alto
Pocitos Nuevo,2.0,1.0,75.0,bajo
Union,2.0,2.0,82.0,medio
Prado,2.0,1.0,65.0,medio
Centro,1.0,1.0,44.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Monoambiente,2.0,1.0,43.0,medio
Sayago,2.0,1.0,200.0,alto
Aguada,1.0,1.0,40.0,bajo
Malvin,3.0,3.0,200.0,alto
Jacinto Vera,1.0,1.0,71.0,medio
Pocitos,2.0,1.0,50.0,bajo
Jacinto Vera,2.0,1.0,59.0,alto
Malvin Norte,2.0,1.0,79.0,bajo
Prado,2.0,1.0,68.0,medio
Monoambiente,2.0,1.0,31.0,bajo
Malvin,2.0,2.0,99.0,alto
Punta Carretas,4.0,2.0,81.0,alto
Brazo Oriental,2.0,1.0,60.0,medio
La Blanqueada,3.0,1.0,80.0,medio
Golf,2.0,4.0,499.0,alto
Pocitos,2.0,4.0,500.0,alto
Pocitos,3.0,4.0,152.0,alto
Punta Carretas,1.0,1.0,52.0,medio
Nuevo Paris,4.0,1.0,200.0,bajo
Parque Batlle,2.0,2.0,60.0,alto
Parque Batlle,4.0,3.0,217.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Punta Carretas,3.0,2.0,75.0,alto
Pocitos Nuevo,4.0,3.0,233.0,alto
Aguada,2.0,1.0,55.0,bajo
Punta Gorda,2.0,4.0,419.0,alto
Malvin,3.0,3.0,129.0,alto
Cerrito,2.0,1.0,300.0,bajo
Puerto Buceo,4.0,2.0,160.0,alto
Buceo,2.0,1.0,170.0,medio
Carrasco,4.0,4.0,150.0,alto
Reducto,2.0,1.0,99.0,medio
La Blanqueada,2.0,1.0,50.0,medio
Centro,1.0,1.0,40.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Monoambiente,2.0,1.0,35.0,bajo
Barrio Sur,1.0,1.0,47.0,bajo
Pocitos,3.0,3.0,112.0,alto
Centro,3.0,1.0,69.0,medio
Malvin,2.0,1.0,55.0,medio
Cordon,1.0,1.0,70.0,bajo
Monoambiente,2.0,1.0,21.0,bajo
Pocitos Nuevo,3.0,1.0,135.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Pocitos,3.0,3.0,100.0,alto
Cordon,1.0,1.0,64.0,medio
Buceo,2.0,2.0,70.0,alto
Golf,2.0,3.0,191.0,alto
Pocitos,1.0,1.0,64.0,medio
La Comercial,2.0,3.0,978.0,alto
Pocitos,3.0,2.0,104.0,alto
Reducto,2.0,1.0,61.0,bajo
Maroñas,3.0,1.0,580.0,bajo
Carrasco,3.0,3.0,600.0,alto
Belvedere,3.0,1.0,79.0,bajo
Reducto,2.0,1.0,67.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Ciudad Vieja,2.0,1.0,81.0,medio
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Monoambiente,2.0,1.0,38.0,bajo
Cordon,3.0,2.0,87.0,medio
Reducto,1.0,1.0,60.0,bajo
Centro,2.0,1.0,79.0,alto
Cerro,2.0,3.0,181.0,medio
Union,3.0,1.0,74.0,bajo
La Blanqueada,1.0,1.0,43.0,bajo
Punta Carretas,1.0,1.0,37.0,medio
Cordon,2.0,1.0,45.0,bajo
Carrasco,2.0,1.0,58.0,medio
Parque Rodo,3.0,3.0,114.0,alto
Parque Batlle,2.0,1.0,45.0,bajo
Barrio Sur,1.0,1.0,46.0,medio
Parque Rodo,2.0,1.0,67.0,medio
Prado,1.0,1.0,67.0,medio
Monoambiente,2.0,1.0,35.0,bajo
Manga,4.0,2.0,632.0,alto
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
Malvin Norte,3.0,2.0,100.0,alto
Centro,2.0,1.0,79.0,bajo
Carrasco,2.0,4.0,382.0,alto
Malvin,2.0,1.0,71.0,medio
Tres Cruces,1.0,1.0,58.0,bajo
Union,2.0,1.0,176.0,bajo
Puerto Buceo,2.0,2.0,67.0,medio
Prado,4.0,2.0,87.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Cordon,2.0,1.0,68.0,medio
Pocitos,1.0,1.0,40.0,medio
Carrasco,2.0,3.0,139.0,alto
Tres Cruces,1.0,1.0,58.0,bajo
Monoambiente,2.0,3.0,486.0,alto
Pocitos,2.0,2.0,156.0,alto
Brazo Oriental,2.0,3.0,242.0,alto
Prado,3.0,2.0,388.0,alto
Centro,4.0,4.0,176.0,alto
Cordon,1.0,1.0,54.0,medio
10 Has.,2.0,1.0,79.0,alto
Punta Carretas,2.0,1.0,8.0,bajo
La Blanqueada,1.0,1.0,55.0,medio
Jacinto Vera,2.0,1.0,70.0,bajo
Carrasco,3.0,1.0,80.0,medio
Pocitos,4.0,4.0,285.0,alto
Centro,2.0,4.0,801.0,alto
Malvin,3.0,2.0,110.0,medio
Buceo,1.0,1.0,62.0,medio
Ciudad Vieja,3.0,2.0,105.0,alto
Monoambiente,2.0,1.0,25.0,bajo
Malvin,4.0,4.0,145.0,alto
Malvin Norte,2.0,1.0,749.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Atahualpa,2.0,1.0,100.0,bajo
Villa Muñoz,2.0,1.0,54.0,medio
Buceo,3.0,1.0,71.0,medio
Barrio Sur,1.0,1.0,37.0,medio
Prado,4.0,4.0,507.0,alto
Ciudad Vieja,1.0,1.0,47.0,bajo
Pocitos,2.0,3.0,66.0,alto
Buceo,2.0,1.0,65.0,medio
Pocitos Nuevo,2.0,2.0,80.0,alto
Malvin Norte,1.0,1.0,35.0,bajo
Cordon,2.0,1.0,54.0,medio
Malvin Norte,3.0,1.0,74.0,bajo
Union,2.0,1.0,78.0,bajo
Punta Gorda,4.0,3.0,375.0,alto
Carrasco,2.0,1.0,1035.0,medio
Peñarol,2.0,1.0,8747.0,alto
Buceo,2.0,2.0,272.0,alto
La Comercial,2.0,1.0,55.0,bajo
Pocitos,3.0,3.0,133.0,alto
Centro,2.0,1.0,101.0,medio
Prado,3.0,2.0,90.0,alto
Monoambiente,2.0,1.0,32.0,bajo
Reducto,3.0,1.0,55.0,bajo
Centro,4.0,2.0,148.0,alto
Cordon,1.0,1.0,39.0,bajo
Puerto Buceo,3.0,2.0,160.0,alto
Atahualpa,2.0,1.0,65.0,bajo
Malvin Norte,1.0,1.0,45.0,bajo
Tres Cruces,1.0,1.0,38.0,bajo
Palermo,3.0,2.0,131.0,alto
Carrasco,3.0,3.0,200.0,alto
Cordon,1.0,1.0,53.0,medio
Buceo,3.0,1.0,111.0,medio
Brazo Oriental,4.0,1.0,600.0,medio
Aguada,2.0,1.0,86.0,bajo
Tres Cruces,2.0,3.0,336.0,alto
Bella Vista,3.0,2.0,95.0,bajo
Monoambiente,2.0,1.0,32.0,bajo
La Blanqueada,1.0,1.0,60.0,bajo
La Blanqueada,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Brazo Oriental,2.0,1.0,79.0,bajo
Las Acacias,3.0,2.0,300.0,medio
Pocitos,3.0,4.0,165.0,alto
Centro,2.0,4.0,577.0,alto
Otros,2.0,1.0,69.0,medio
Jacinto Vera,3.0,1.0,80.0,medio
Monoambiente,2.0,1.0,39.0,medio
Prado,2.0,1.0,71.0,medio
Monoambiente,2.0,1.0,30.0,bajo
Prado,3.0,2.0,192.0,alto
Villa Española,1.0,1.0,40.0,bajo
Aires Puros,4.0,2.0,410.0,bajo
Carrasco,3.0,4.0,320.0,alto
Malvin,1.0,1.0,43.0,medio
Reducto,3.0,1.0,75.0,bajo
Manga,2.0,1.0,86.0,bajo
Centro,2.0,1.0,59.0,bajo
Cordon,1.0,1.0,48.0,bajo
Malvin,2.0,1.0,50.0,medio
Colon,3.0,1.0,260.0,bajo
Reducto,2.0,2.0,225.0,medio
Atahualpa,3.0,2.0,382.0,alto
Maroñas,2.0,1.0,80.0,bajo
Carrasco,2.0,3.0,118.0,alto
Otros,2.0,1.0,1.0,alto
Cordon,3.0,2.0,80.0,medio
Pocitos Nuevo,3.0,2.0,180.0,alto
Jacinto Vera,2.0,1.0,562.0,alto
Reducto,2.0,1.0,60.0,bajo
Belvedere,2.0,1.0,195.0,bajo
Villa Biarritz,3.0,4.0,201.0,alto
Barrio Sur,2.0,1.0,71.0,medio
La Blanqueada,1.0,1.0,42.0,bajo
Piedras Blancas,2.0,4.0,142.0,bajo
Aguada,3.0,3.0,108.0,bajo
Prado,2.0,1.0,50.0,bajo
La Blanqueada,3.0,2.0,107.0,medio
La Blanqueada,2.0,1.0,49.0,bajo
Malvin,1.0,1.0,47.0,medio
Reducto,2.0,1.0,70.0,medio
La Blanqueada,1.0,1.0,39.0,bajo
Punta Gorda,4.0,4.0,750.0,alto
Sayago,3.0,2.0,329.0,medio
Malvin,2.0,2.0,71.0,alto
Monoambiente,2.0,1.0,32.0,bajo
La Blanqueada,3.0,2.0,191.0,medio
Malvin,3.0,2.0,340.0,alto
Bolivar M. Modelo,2.0,2.0,120.0,medio
Cordon,2.0,1.0,76.0,medio
Palermo,2.0,1.0,54.0,medio
Buceo,2.0,1.0,70.0,bajo
Ciudad Vieja,1.0,1.0,47.0,bajo
Brazo Oriental,3.0,1.0,90.0,medio
Cordon,2.0,1.0,69.0,medio
Prado,3.0,1.0,180.0,medio
Malvin,2.0,1.0,55.0,medio
La Blanqueada,1.0,1.0,46.0,medio
Pocitos,3.0,3.0,137.0,alto
Cerro,3.0,2.0,122.0,bajo
Capurro,4.0,2.0,252.0,medio
Buceo,3.0,1.0,66.0,medio
Punta Carretas,4.0,3.0,177.0,alto
Prado,2.0,3.0,558.0,alto
Cordon,1.0,1.0,51.0,medio
Monoambiente,2.0,1.0,21.0,bajo
La Blanqueada,1.0,1.0,52.0,bajo
Carrasco Norte,3.0,3.0,813.0,alto
La Blanqueada,3.0,1.0,73.0,medio
Malvin,2.0,2.0,72.0,alto
Tres Cruces,1.0,1.0,45.0,bajo
Monoambiente,2.0,1.0,34.0,bajo
Cordon,3.0,2.0,70.0,bajo
Pocitos,3.0,2.0,79.0,medio
La Blanqueada,3.0,2.0,73.0,medio
Barrio Sur,2.0,1.0,55.0,medio
Pocitos,3.0,3.0,137.0,alto
La Blanqueada,2.0,1.0,51.0,bajo
Union,1.0,1.0,44.0,bajo
Cordon,3.0,2.0,115.0,medio
Atahualpa,4.0,2.0,100.0,medio
Larrañaga,2.0,2.0,215.0,medio
Buceo,1.0,1.0,130.0,medio
Peñarol,4.0,4.0,545.0,medio
Pocitos,2.0,1.0,20.0,bajo
Pocitos,1.0,1.0,56.0,medio
Aguada,1.0,1.0,30.0,bajo
Belvedere,4.0,2.0,239.0,medio
Tres Cruces,1.0,1.0,83.0,bajo
Centro,2.0,2.0,80.0,medio
Pocitos,3.0,2.0,124.0,medio
Arroyo Seco,2.0,1.0,53.0,medio
Atahualpa,4.0,2.0,100.0,medio
Pocitos,3.0,3.0,115.0,alto
Tres Cruces,2.0,1.0,116.0,alto
Centro,1.0,1.0,92.0,medio
Atahualpa,1.0,1.0,54.0,bajo
Centro,2.0,2.0,90.0,medio
Parque Rodo,2.0,4.0,300.0,alto
Punta Gorda,2.0,4.0,510.0,alto
Otros,2.0,1.0,1608.0,alto
Aguada,2.0,1.0,54.0,bajo
Aires Puros,2.0,3.0,340.0,medio
Centro,2.0,1.0,28.0,bajo
Tres Cruces,3.0,2.0,70.0,bajo
Punta Carretas,2.0,1.0,79.0,bajo
Centro,2.0,1.0,70.0,medio
Tres Cruces,2.0,1.0,50.0,bajo
Parque Batlle,2.0,2.0,365.0,alto
Pocitos,4.0,4.0,189.0,alto
Goes,3.0,2.0,120.0,medio
La Comercial,2.0,1.0,110.0,bajo
La Comercial,4.0,2.0,159.0,bajo
Parque Batlle,2.0,1.0,62.0,bajo
Pocitos,2.0,1.0,55.0,medio
Monoambiente,2.0,1.0,39.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Aguada,3.0,1.0,364.0,alto
Colon,4.0,1.0,280.0,bajo
Pocitos,2.0,1.0,59.0,medio
Cordon,2.0,1.0,77.0,medio
Pocitos,2.0,1.0,79.0,bajo
Centro,2.0,1.0,61.0,medio
Otros,1.0,1.0,517.0,alto
Tres Cruces,1.0,1.0,42.0,medio
Tres Cruces,1.0,1.0,57.0,bajo
Carrasco Norte,2.0,2.0,90.0,alto
Malvin,3.0,2.0,100.0,alto
Punta Carretas,2.0,2.0,169.0,alto
Ciudad Vieja,2.0,4.0,385.0,alto
Malvin,1.0,1.0,50.0,medio
Punta Carretas,2.0,1.0,754.0,alto
Centro,1.0,1.0,40.0,bajo
Malvin,2.0,1.0,80.0,medio
La Blanqueada,2.0,2.0,152.0,alto
Cordon,1.0,1.0,57.0,medio
Goes,3.0,1.0,99.0,medio
Centro,3.0,2.0,165.0,alto
Malvin,2.0,1.0,177.0,alto
Tres Cruces,1.0,1.0,49.0,medio
Punta Carretas,3.0,4.0,130.0,alto
Cordon,2.0,1.0,60.0,alto
Cordon,2.0,2.0,100.0,medio
Palermo,1.0,1.0,54.0,bajo
Monoambiente,2.0,2.0,217.0,medio
Union,1.0,1.0,36.0,medio
Prado,3.0,2.0,120.0,alto
Piedras Blancas,1.0,1.0,33.0,bajo
Jacinto Vera,2.0,1.0,571.0,alto
Malvin,3.0,2.0,220.0,medio
Otros,2.0,4.0,755.0,alto
Belvedere,2.0,1.0,51.0,bajo
Aguada,1.0,1.0,38.0,bajo
Puerto Buceo,1.0,2.0,83.0,alto
Prado,2.0,2.0,130.0,alto
Malvin Norte,2.0,1.0,72.0,bajo
Monoambiente,2.0,1.0,26.0,bajo
Punta Carretas,3.0,2.0,90.0,alto
Pocitos,2.0,2.0,134.0,alto
Cordon,1.0,1.0,46.0,bajo
Prado,3.0,2.0,107.0,medio
Aguada,3.0,2.0,130.0,alto
Tres Cruces,1.0,1.0,45.0,medio
Cordon,2.0,2.0,82.0,medio
Pocitos,2.0,1.0,124.0,alto
Pocitos,2.0,2.0,81.0,alto
Atahualpa,2.0,1.0,51.0,bajo
La Blanqueada,1.0,1.0,1.0,bajo
Centro,2.0,4.0,576.0,alto
Punta Gorda,2.0,2.0,305.0,alto
Monoambiente,2.0,1.0,39.0,bajo
Pocitos,3.0,4.0,216.0,alto
Puerto Buceo,1.0,1.0,45.0,alto
Malvin,3.0,1.0,70.0,medio
Cordon,2.0,1.0,45.0,bajo
Pocitos,2.0,2.0,98.0,alto
Pocitos,4.0,4.0,343.0,alto
Jacinto Vera,3.0,2.0,200.0,alto
Centro,4.0,2.0,94.0,medio
Monoambiente,2.0,1.0,33.0,bajo
Centro,1.0,1.0,60.0,medio
Malvin Norte,3.0,1.0,84.0,medio
Pocitos Nuevo,4.0,3.0,158.0,alto
Ciudad Vieja,2.0,1.0,79.0,medio
Buceo,2.0,1.0,39.0,bajo
Parque Rodo,3.0,1.0,63.0,alto
Piedras Blancas,3.0,2.0,120.0,medio
Punta Gorda,3.0,2.0,120.0,alto
Punta Carretas,1.0,1.0,50.0,medio
Malvin Norte,2.0,1.0,90.0,bajo
Malvin,2.0,2.0,77.0,alto
Prado,2.0,1.0,63.0,medio
Aguada,2.0,2.0,58.0,medio
La Comercial,2.0,2.0,79.0,medio
Carrasco,4.0,3.0,230.0,alto
Buceo,1.0,1.0,50.0,medio
Buceo,3.0,2.0,178.0,alto
Buceo,2.0,1.0,298.0,alto
Palermo,2.0,1.0,79.0,bajo
Cordon,1.0,1.0,38.0,bajo
Villa Española,2.0,1.0,126.0,bajo
Arroyo Seco,2.0,1.0,57.0,medio
La Blanqueada,4.0,2.0,140.0,alto
Prado,3.0,1.0,70.0,medio
Aguada,2.0,1.0,57.0,medio
Pocitos,2.0,1.0,79.0,bajo
Palermo,2.0,1.0,79.0,alto
Ciudad Vieja,3.0,2.0,113.0,medio
Punta Carretas,2.0,2.0,73.0,alto
Pocitos Nuevo,2.0,1.0,75.0,bajo
Union,2.0,2.0,82.0,medio
Prado,2.0,1.0,65.0,medio
Centro,1.0,1.0,44.0,bajo
Parque Batlle,2.0,4.0,405.0,alto
Union,3.0,3.0,266.0,medio
Monoambiente,2.0,1.0,43.0,medio
Sayago,2.0,1.0,200.0,alto
Aguada,1.0,1.0,40.0,bajo
Malvin,3.0,3.0,200.0,alto
Jacinto Vera,1.0,1.0,71.0,medio
Pocitos,2.0,1.0,50.0,bajo
Jacinto Vera,2.0,1.0,59.0,alto
Malvin Norte,2.0,1.0,79.0,bajo
Prado,2.0,1.0,68.0,medio
Monoambiente,2.0,1.0,31.0,bajo
Malvin,2.0,2.0,99.0,alto
Brazo Oriental,4.0,3.0,277.0,alto
Punta Carretas,4.0,2.0,81.0,alto
Brazo Oriental,2.0,1.0,60.0,medio
La Blanqueada,3.0,1.0,80.0,medio
Golf,2.0,4.0,499.0,alto
Pocitos,2.0,4.0,500.0,alto
Pocitos,3.0,4.0,152.0,alto
Buceo,2.0,1.0,47.0,medio
Punta Carretas,1.0,1.0,52.0,medio
Nuevo Paris,4.0,1.0,200.0,bajo
Parque Batlle,2.0,2.0,60.0,alto
Parque Batlle,4.0,3.0,217.0,alto
Paso Carrasco,3.0,3.0,315.0,alto
Monoambiente,2.0,1.0,50.0,bajo
Malvin,1.0,1.0,47.0,medio
Punta Carretas,3.0,2.0,75.0,alto
Pocitos Nuevo,4.0,3.0,233.0,alto
Aguada,2.0,1.0,55.0,bajo
Punta Gorda,2.0,4.0,419.0,alto
Malvin,3.0,3.0,129.0,alto
Cerrito,2.0,1.0,300.0,bajo
Puerto Buceo,4.0,2.0,160.0,alto
Buceo,2.0,1.0,170.0,medio
Carrasco,4.0,4.0,150.0,alto
Reducto,2.0,1.0,99.0,medio
La Blanqueada,2.0,1.0,50.0,medio
Centro,1.0,1.0,40.0,bajo
Monoambiente,2.0,1.0,25.0,bajo
Monoambiente,2.0,1.0,46.0,bajo
Monoambiente,2.0,1.0,35.0,bajo
Barrio Sur,1.0,1.0,47.0,bajo
Pocitos,3.0,3.0,112.0,alto
Centro,3.0,1.0,69.0,medio
Malvin,2.0,1.0,55.0,medio
Cordon,1.0,1.0,70.0,bajo
Monoambiente,2.0,1.0,21.0,bajo
Malvin,2.0,3.0,653.0,alto
Pocitos Nuevo,3.0,1.0,135.0,alto
La Blanqueada,2.0,1.0,74.0,medio
Jacinto Vera,1.0,1.0,43.0,medio
Brazo Oriental,1.0,1.0,44.0,bajo
Pocitos,3.0,3.0,100.0,alto
Cordon,1.0,1.0,64.0,medio
Buceo,2.0,2.0,70.0,alto
Golf,2.0,3.0,191.0,alto
Pocitos,1.0,1.0,64.0,medio
La Comercial,2.0,3.0,978.0,alto
Pocitos,3.0,2.0,104.0,alto
Reducto,2.0,1.0,61.0,bajo
Maroñas,3.0,1.0,580.0,bajo
Ciudad Vieja,2.0,2.0,1.0,bajo
Carrasco,3.0,3.0,600.0,alto
Belvedere,3.0,1.0,79.0,bajo
Reducto,2.0,1.0,67.0,bajo
Ciudad Vieja,2.0,2.0,104.0,bajo
Belvedere,2.0,1.0,62.0,bajo
Ciudad Vieja,2.0,1.0,81.0,medio
Pocitos,3.0,2.0,124.0,alto
Cordon,1.0,1.0,4.0,medio
Pocitos,2.0,2.0,96.0,alto
Monoambiente,2.0,1.0,38.0,bajo
Cordon,3.0,2.0,87.0,medio
Reducto,1.0,1.0,60.0,bajo
Centro,2.0,1.0,79.0,alto
Cerro,2.0,3.0,181.0,medio
Union,3.0,1.0,74.0,bajo
La Blanqueada,1.0,1.0,43.0,bajo
Punta Carretas,1.0,1.0,37.0,medio
Pocitos,2.0,1.0,57.0,medio
Cordon,2.0,1.0,45.0,bajo
Carrasco,2.0,1.0,58.0,medio
Parque Rodo,3.0,3.0,114.0,alto
Parque Batlle,2.0,1.0,45.0,bajo
Barrio Sur,1.0,1.0,46.0,medio
Parque Rodo,2.0,1.0,67.0,medio
Prado,1.0,1.0,67.0,medio
Monoambiente,2.0,1.0,35.0,bajo
Manga,4.0,2.0,632.0,alto
Pocitos,1.0,1.0,67.0,alto
Cerrito,2.0,4.0,1358.0,alto
